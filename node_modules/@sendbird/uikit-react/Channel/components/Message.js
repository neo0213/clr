import { a as __spreadArray } from '../../chunks/bundle-Y6TqPszM.js';
import React__default, { useState, useEffect, useRef, useLayoutEffect, useMemo } from 'react';
import { f as format } from '../../chunks/bundle-pmVgESW3.js';
import SuggestedMentionList from './SuggestedMentionList.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { u as useChannelContext } from '../../chunks/bundle-QO9wq7-1.js';
import { n as getClassName, K as getSuggestedReplies } from '../../chunks/bundle-ZT6XnGSN.js';
import { i as isDisabledBecauseFrozen, b as isDisabledBecauseMuted } from '../../chunks/bundle-menQ38z9.js';
import { M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from '../../chunks/bundle-YQkYq090.js';
import DateSeparator from '../../ui/DateSeparator.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-0IelBspE.js';
import MessageInput from '../../ui/MessageInput.js';
import MessageContent from '../../ui/MessageContent.js';
import FileViewer from './FileViewer.js';
import RemoveMessage from './RemoveMessageModal.js';
import { M as MessageInputKeys } from '../../chunks/bundle-Jw6D-oM_.js';
import { u as useLocalization } from '../../chunks/bundle-Xly_X4hP.js';
import { u as useHandleOnScrollCallback } from '../../chunks/bundle-Nv1SlZSC.js';
import { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';
import '../../chunks/bundle-xgxXEKxk.js';
import '../../ui/Icon.js';
import '../../chunks/bundle-JhG5BHdE.js';
import '../../chunks/bundle-Tep20T57.js';
import '../../ui/ImageRenderer.js';
import '../../chunks/bundle-8VA5hO1c.js';
import '../../chunks/bundle-2AUp3oeN.js';
import '../../Thread/context.js';
import '../../chunks/bundle-EteEacTX.js';
import '../../chunks/bundle-7x4clnC7.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-3WQuaADd.js';
import '../../Thread/context/types.js';
import '@sendbird/chat';
import '../../chunks/bundle-GGcTNRCI.js';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-EPtYsHAJ.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-Sk3SXXP7.js';
import '../../withSendbird.js';
import '../../chunks/bundle-zz1eCYds.js';
import '../hooks/useInitialMessagesFetch.js';
import '../../chunks/bundle-pCwi8C-K.js';
import '../../chunks/bundle-LhtrqZSE.js';
import '../../chunks/bundle-JuKER7D_.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-vSJ8dTAZ.js';
import 'dompurify';
import '../../chunks/bundle-2YEsND5T.js';
import '../../chunks/bundle-zCWUhqT2.js';
import '../../chunks/bundle-89OkQYTj.js';
import '../../chunks/bundle-lSKfBDuq.js';
import '../../chunks/bundle-l0M5nN1Q.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-oghsyfOE.js';
import '../../chunks/bundle-6uVd8Nrl.js';
import '../../ui/MessageItemMenu.js';
import '../../ui/ContextMenu.js';
import 'react-dom';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-KOKqPpBq.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-cJc3JBZb.js';
import '../../chunks/bundle-Mn36ivpf.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../hooks/useModal.js';
import '../../chunks/bundle-5JvP07dI.js';
import '../../ui/UserListItem.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../ui/AdminMessage.js';
import '../../ui/QuoteMessage.js';
import '../../chunks/bundle-WZvwkbYN.js';
import '../../chunks/bundle-k4WuO78S.js';
import '../../ui/ThreadReplies.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-GiSLT4lG.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-0SIFukuT.js';
import '../../chunks/bundle-LTnLzJFb.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../chunks/bundle-Ku1a64TD.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../chunks/bundle-JSlDfYOF.js';

var useDidMountEffect = function (func, deps) {
    var _a = useState(false), didMount = _a[0], setDidmount = _a[1];
    useEffect(function () {
        if (didMount) {
            func();
        }
        else {
            setDidmount(true);
        }
    }, deps);
};

var SuggestedReplies = function (_a) {
    var replyOptions = _a.replyOptions, onSendMessage = _a.onSendMessage;
    var _b = useState(false), replied = _b[0], setReplied = _b[1];
    var onClickReply = function (event, option) {
        event.preventDefault();
        onSendMessage({ message: option });
        setReplied(true);
    };
    if (replied) {
        return null;
    }
    return (React__default.createElement("div", { className: "sendbird-suggested-replies" }, replyOptions.map(function (option, index) {
        return (React__default.createElement("div", { className: "sendbird-suggested-replies__option", id: option, key: index + option, onClick: function (e) { return onClickReply(e, option); } }, option));
    })));
};

// todo: Refactor this component, is too complex now
var Message = function (_a) {
    var _b, _c, _d;
    var message = _a.message, hasSeparator = _a.hasSeparator, chainTop = _a.chainTop, chainBottom = _a.chainBottom, handleScroll = _a.handleScroll, renderCustomSeparator = _a.renderCustomSeparator, renderEditInput = _a.renderEditInput, renderMessage = _a.renderMessage, renderMessageContent = _a.renderMessageContent;
    var _e = useLocalization(), dateLocale = _e.dateLocale, stringSet = _e.stringSet;
    var globalStore = useSendbirdStateContext();
    var _f = globalStore.config, userId = _f.userId, isOnline = _f.isOnline, isMentionEnabled = _f.isMentionEnabled, userMention = _f.userMention, logger = _f.logger;
    var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;
    var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;
    var _g = useChannelContext(), initialized = _g.initialized, currentGroupChannel = _g.currentGroupChannel, highLightedMessageId = _g.highLightedMessageId, setHighLightedMessageId = _g.setHighLightedMessageId, animatedMessageId = _g.animatedMessageId, setAnimatedMessageId = _g.setAnimatedMessageId, updateMessage = _g.updateMessage, scrollToMessage = _g.scrollToMessage, replyType = _g.replyType, threadReplySelectType = _g.threadReplySelectType, isReactionEnabled = _g.isReactionEnabled, toggleReaction = _g.toggleReaction, emojiContainer = _g.emojiContainer, nicknamesMap = _g.nicknamesMap, setQuoteMessage = _g.setQuoteMessage, resendMessage = _g.resendMessage, deleteMessage = _g.deleteMessage, renderUserMentionItem = _g.renderUserMentionItem, onReplyInThread = _g.onReplyInThread, onQuoteMessageClick = _g.onQuoteMessageClick, onMessageAnimated = _g.onMessageAnimated, onMessageHighlighted = _g.onMessageHighlighted, onScrollCallback = _g.onScrollCallback, setIsScrolled = _g.setIsScrolled, sendMessage = _g.sendMessage, localMessages = _g.localMessages;
    var _h = useState(false), showEdit = _h[0], setShowEdit = _h[1];
    var _j = useState(false), showRemove = _j[0], setShowRemove = _j[1];
    var _k = useState(false), showFileViewer = _k[0], setShowFileViewer = _k[1];
    var _l = useState(false), isAnimated = _l[0], setIsAnimated = _l[1];
    var _m = useState(false), isHighlighted = _m[0], setIsHighlighted = _m[1];
    var _o = useState(''), mentionNickname = _o[0], setMentionNickname = _o[1];
    var _p = useState([]), mentionedUsers = _p[0], setMentionedUsers = _p[1];
    var _q = useState([]), mentionedUserIds = _q[0], setMentionedUserIds = _q[1];
    var _r = useState(null), messageInputEvent = _r[0], setMessageInputEvent = _r[1];
    var _s = useState(null), selectedUser = _s[0], setSelectedUser = _s[1];
    var _t = useState([]), mentionSuggestedUsers = _t[0], setMentionSuggestedUsers = _t[1];
    var editMessageInputRef = useRef(null);
    var messageScrollRef = useRef(null);
    var displaySuggestedMentionList = isOnline
        && isMentionEnabled
        && mentionNickname.length > 0
        && !isDisabledBecauseFrozen(currentGroupChannel)
        && !isDisabledBecauseMuted(currentGroupChannel);
    var disabled = !initialized
        || isDisabledBecauseFrozen(currentGroupChannel)
        || isDisabledBecauseMuted(currentGroupChannel)
        || !isOnline;
    var handleOnScroll = useHandleOnScrollCallback({
        hasMore: false,
        onScroll: onScrollCallback,
        scrollRef: messageScrollRef,
        setIsScrolled: setIsScrolled,
    });
    var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger: logger });
    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
    useEffect(function () {
        setMentionedUsers(mentionedUsers.filter(function (_a) {
            var userId = _a.userId;
            var i = mentionedUserIds.indexOf(userId);
            if (i < 0) {
                return false;
            }
            else {
                mentionedUserIds.splice(i, 1);
                return true;
            }
        }));
    }, [mentionedUserIds]);
    useLayoutEffect(function () {
        // Keep the scrollBottom value after fetching new message list
        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
    }, []);
    /**
     * Move the messsage list scroll
     * when the message's height is changed by `showEdit` OR `message.reactions`
     */
    useDidMountEffect(function () {
        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
    }, [showEdit, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);
    useDidMountEffect(function () {
        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
    }, [message === null || message === void 0 ? void 0 : message.updatedAt]);
    useLayoutEffect(function () {
        var animationTimeout = null;
        var messageHighlightedTimeout = null;
        if (highLightedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
            handleOnScroll();
            setIsAnimated(false);
            animationTimeout = setTimeout(function () {
                setIsHighlighted(true);
            }, 500);
            messageHighlightedTimeout = setTimeout(function () {
                setHighLightedMessageId(0);
                onMessageHighlighted === null || onMessageHighlighted === void 0 ? void 0 : onMessageHighlighted();
            }, 1600);
        }
        else {
            setIsHighlighted(false);
        }
        return function () {
            clearTimeout(animationTimeout);
            clearTimeout(messageHighlightedTimeout);
        };
    }, [highLightedMessageId, messageScrollRef.current, message.messageId]);
    useLayoutEffect(function () {
        var animationTimeout = null;
        var messageAnimatedTimeout = null;
        if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
            handleOnScroll();
            setIsHighlighted(false);
            animationTimeout = setTimeout(function () {
                setIsAnimated(true);
            }, 500);
            messageAnimatedTimeout = setTimeout(function () {
                setAnimatedMessageId(0);
                onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();
            }, 1600);
        }
        else {
            setIsAnimated(false);
        }
        return function () {
            clearTimeout(animationTimeout);
            clearTimeout(messageAnimatedTimeout);
        };
    }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);
    var renderedMessage = useMemo(function () {
        return renderMessage === null || renderMessage === void 0 ? void 0 : renderMessage({
            message: message,
            chainTop: chainTop,
            chainBottom: chainBottom,
        });
    }, [message, renderMessage]);
    var renderedCustomSeparator = useMemo(function () {
        if (renderCustomSeparator) {
            return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message: message });
        }
        return null;
    }, [message, renderCustomSeparator]);
    if (renderedMessage) {
        return (React__default.createElement("div", { "data-sb-message-id": message.messageId, "data-sb-created-at": message.createdAt, ref: messageScrollRef, className: getClassName([
                'sendbird-msg-hoc sendbird-msg--scroll-ref',
                isAnimated ? 'sendbird-msg-hoc__animated' : '',
                isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',
            ]) },
            // TODO: Add message instance as a function parameter
            hasSeparator && (renderedCustomSeparator || (React__default.createElement(DateSeparator, null,
                React__default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {
                    locale: dateLocale,
                }))))),
            renderedMessage));
    }
    if (showEdit && ((_c = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _c === void 0 ? void 0 : _c.call(message))) {
        return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || (React__default.createElement(React__default.Fragment, null,
            displaySuggestedMentionList && (React__default.createElement(SuggestedMentionList, { targetNickname: mentionNickname, inputEvent: messageInputEvent, renderUserMentionItem: renderUserMentionItem, onUserItemClick: function (user) {
                    if (user) {
                        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
                    }
                    setMentionNickname('');
                    setSelectedUser(user);
                    setMessageInputEvent(null);
                }, onFocusItemChange: function () {
                    setMessageInputEvent(null);
                }, onFetchUsers: function (users) {
                    setMentionSuggestedUsers(users);
                }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount })),
            React__default.createElement(MessageInput, { isEdit: true, channel: currentGroupChannel, disabled: disabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, message: message, onStartTyping: function () {
                    var _a;
                    (_a = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);
                }, onUpdateMessage: function (_a) {
                    var _b;
                    var messageId = _a.messageId, message = _a.message, mentionTemplate = _a.mentionTemplate;
                    updateMessage({
                        messageId: messageId,
                        message: message,
                        mentionedUsers: mentionedUsers,
                        mentionTemplate: mentionTemplate,
                    });
                    setShowEdit(false);
                    (_b = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentGroupChannel);
                }, onCancelEdit: function () {
                    var _a;
                    setMentionNickname('');
                    setMentionedUsers([]);
                    setMentionedUserIds([]);
                    setMentionSuggestedUsers([]);
                    setShowEdit(false);
                    (_a = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);
                }, onUserMentioned: function (user) {
                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
                        setSelectedUser(null);
                        setMentionNickname('');
                    }
                }, onMentionStringChange: function (mentionText) {
                    setMentionNickname(mentionText);
                }, onMentionedUserIdsUpdated: function (userIds) {
                    setMentionedUserIds(userIds);
                }, onKeyDown: function (e) {
                    if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0
                        && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
                        setMessageInputEvent(e);
                        return true;
                    }
                    return false;
                } })));
    }
    return (React__default.createElement("div", { className: getClassName([
            'sendbird-msg-hoc sendbird-msg--scroll-ref',
            isAnimated ? 'sendbird-msg-hoc__animated' : '',
            isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',
        ]), style: { marginBottom: '2px' }, "data-sb-message-id": message.messageId, "data-sb-created-at": message.createdAt, ref: messageScrollRef },
        hasSeparator && (renderedCustomSeparator || (React__default.createElement(DateSeparator, null,
            React__default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {
                locale: dateLocale,
            }))))),
        (renderMessageContent === null || renderMessageContent === void 0 ? void 0 : renderMessageContent()) || (React__default.createElement(MessageContent, { className: "sendbird-message-hoc__message-content", userId: userId, scrollToMessage: scrollToMessage, channel: currentGroupChannel, message: message, disabled: !isOnline, chainTop: chainTop, chainBottom: chainBottom, isReactionEnabled: isReactionEnabled, replyType: replyType, threadReplySelectType: threadReplySelectType, nicknamesMap: nicknamesMap, emojiContainer: emojiContainer, showEdit: setShowEdit, showRemove: setShowRemove, showFileViewer: setShowFileViewer, resendMessage: resendMessage, deleteMessage: deleteMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onReplyInThread: onReplyInThread, onQuoteMessageClick: onQuoteMessageClick, onMessageHeightChange: handleScroll })),
        message.messageId === ((_d = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.lastMessage) === null || _d === void 0 ? void 0 : _d.messageId)
            // the options should appear only when there's no failed or pending messages
            && localMessages.every(function (message) { return message.sendingStatus === 'succeeded'; })
            && getSuggestedReplies(message).length > 0 && (React__default.createElement(SuggestedReplies, { replyOptions: getSuggestedReplies(message), onSendMessage: sendMessage })),
        showRemove && (React__default.createElement(RemoveMessage, { message: message, onCancel: function () { return setShowRemove(false); } })),
        showFileViewer && (React__default.createElement(FileViewer, { message: message, onCancel: function () { return setShowFileViewer(false); } }))));
};

export { Message as default };
//# sourceMappingURL=Message.js.map
