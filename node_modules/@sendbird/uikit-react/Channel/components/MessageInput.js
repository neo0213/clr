import { a as __spreadArray } from '../../chunks/bundle-Y6TqPszM.js';
import React__default, { useContext, useState, useEffect } from 'react';
import { i as isDisabledBecauseFrozen, b as isDisabledBecauseMuted, c as isOperator } from '../../chunks/bundle-menQ38z9.js';
import MessageInput from '../../ui/MessageInput.js';
import QuoteMessageInput from '../../ui/QuoteMessageInput.js';
import { L as LocalizationContext } from '../../chunks/bundle-Xly_X4hP.js';
import { u as useChannelContext } from '../../chunks/bundle-QO9wq7-1.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import SuggestedMentionList from './SuggestedMentionList.js';
import { M as MessageInputKeys } from '../../chunks/bundle-Jw6D-oM_.js';
import { V as VoiceMessageInputWrapper } from '../../chunks/bundle-jyTJAjUy.js';
import { useDirtyGetMentions } from '../../Message/hooks/useDirtyGetMentions.js';
import { u as useMediaQueryContext } from '../../chunks/bundle-Mn36ivpf.js';
import { useHandleUploadFiles } from '../hooks/useHandleUploadFiles.js';
import '../../chunks/bundle-pmVgESW3.js';
import '../../chunks/bundle-xgxXEKxk.js';
import '../../chunks/bundle-ZT6XnGSN.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-zz1eCYds.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-YQkYq090.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-0IelBspE.js';
import '../../chunks/bundle-JuKER7D_.js';
import '../../chunks/bundle-vSJ8dTAZ.js';
import 'dompurify';
import '../../chunks/bundle-2YEsND5T.js';
import '../../chunks/bundle-zCWUhqT2.js';
import '../../chunks/bundle-89OkQYTj.js';
import '../../ui/Icon.js';
import '../../chunks/bundle-JhG5BHdE.js';
import '../../chunks/bundle-lSKfBDuq.js';
import '../../ui/ImageRenderer.js';
import '../../chunks/bundle-WZvwkbYN.js';
import '../../chunks/bundle-3WQuaADd.js';
import '../../chunks/bundle-GGcTNRCI.js';
import '../../chunks/bundle-EPtYsHAJ.js';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-8VA5hO1c.js';
import '../hooks/useInitialMessagesFetch.js';
import '../../chunks/bundle-7x4clnC7.js';
import '../../chunks/bundle-Sk3SXXP7.js';
import '../../chunks/bundle-pCwi8C-K.js';
import '../../chunks/bundle-EteEacTX.js';
import '../../withSendbird.js';
import '../../chunks/bundle-Tep20T57.js';
import '../../chunks/bundle-2AUp3oeN.js';
import '../../Thread/context.js';
import '../../Thread/context/types.js';
import '@sendbird/chat';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../chunks/bundle-Ku1a64TD.js';
import '../../VoiceRecorder/context.js';
import '../../chunks/bundle-5JvP07dI.js';
import 'react-dom';
import '../../VoiceRecorder/useVoiceRecorder.js';
import '../../chunks/bundle-nHhZeAVb.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ProgressBar.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-LhtrqZSE.js';
import '../../hooks/useModal.js';

var MessageInputWrapper = function (props, ref) {
    var _a;
    var value = props.value, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon;
    var propDisabled = props.disabled;
    var channelContext = useChannelContext();
    var currentGroupChannel = channelContext.currentGroupChannel, initialized = channelContext.initialized, quoteMessage = channelContext.quoteMessage, sendMessage = channelContext.sendMessage, sendFileMessage = channelContext.sendFileMessage, sendVoiceMessage = channelContext.sendVoiceMessage, sendMultipleFilesMessage = channelContext.sendMultipleFilesMessage, setQuoteMessage = channelContext.setQuoteMessage, messageInputRef = channelContext.messageInputRef, renderUserMentionItem = channelContext.renderUserMentionItem;
    var globalStore = useSendbirdStateContext();
    var isMobile = useMediaQueryContext().isMobile;
    var channel = currentGroupChannel;
    var _b = globalStore.config, isOnline = _b.isOnline, isMentionEnabled = _b.isMentionEnabled, userMention = _b.userMention, isVoiceMessageEnabled = _b.isVoiceMessageEnabled, logger = _b.logger;
    var isMultipleFilesMessageEnabled = ((_a = channelContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : globalStore.config.isMultipleFilesMessageEnabled);
    var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10;
    var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15;
    var stringSet = useContext(LocalizationContext).stringSet;
    var _c = useState(''), mentionNickname = _c[0], setMentionNickname = _c[1];
    // todo: set type
    var _d = useState([]), mentionedUsers = _d[0], setMentionedUsers = _d[1];
    var _e = useState([]), mentionedUserIds = _e[0], setMentionedUserIds = _e[1];
    var _f = useState(null), selectedUser = _f[0], setSelectedUser = _f[1];
    var _g = useState([]), mentionSuggestedUsers = _g[0], setMentionSuggestedUsers = _g[1];
    var _h = useState(null), messageInputEvent = _h[0], setMessageInputEvent = _h[1];
    var _j = useState(false), showVoiceMessageInput = _j[0], setShowVoiceMessageInput = _j[1];
    var disabled = propDisabled
        || !initialized
        || isDisabledBecauseFrozen(channel)
        || isDisabledBecauseMuted(channel)
        || !isOnline;
    var isOperator$1 = isOperator(channel);
    var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
    var displaySuggestedMentionList = isOnline
        && isMentionEnabled
        && mentionNickname.length > 0
        && !isDisabledBecauseFrozen(channel)
        && !isDisabledBecauseMuted(channel)
        && !isBroadcast;
    // Reset when channel changes
    useEffect(function () {
        setMentionNickname('');
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setSelectedUser(null);
        setMentionSuggestedUsers([]);
        setMessageInputEvent(null);
        setShowVoiceMessageInput(false);
    }, [channel === null || channel === void 0 ? void 0 : channel.url]);
    var mentionNodes = useDirtyGetMentions({ ref: ref || messageInputRef }, { logger: logger });
    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
    useEffect(function () {
        setMentionedUsers(mentionedUsers.filter(function (_a) {
            var userId = _a.userId;
            var i = mentionedUserIds.indexOf(userId);
            if (i < 0) {
                return false;
            }
            else {
                mentionedUserIds.splice(i, 1);
                return true;
            }
        }));
    }, [mentionedUserIds]);
    // MFM
    var handleUploadFiles = useHandleUploadFiles({
        sendFileMessage: sendFileMessage,
        sendMultipleFilesMessage: sendMultipleFilesMessage,
        quoteMessage: quoteMessage,
    }, {
        logger: logger,
    });
    // broadcast channel + not operator
    if (isBroadcast && !isOperator$1) {
        return null;
    }
    // other conditions
    return (React__default.createElement("div", { className: "sendbird-message-input-wrapper".concat(showVoiceMessageInput ? '--voice-message' : '') },
        displaySuggestedMentionList && (React__default.createElement(SuggestedMentionList, { targetNickname: mentionNickname, inputEvent: messageInputEvent, renderUserMentionItem: renderUserMentionItem, onUserItemClick: function (user) {
                if (user) {
                    setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
                }
                setMentionNickname('');
                setSelectedUser(user);
                setMessageInputEvent(null);
            }, onFocusItemChange: function () {
                setMessageInputEvent(null);
            }, onFetchUsers: function (users) {
                setMentionSuggestedUsers(users);
            }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount })),
        quoteMessage && (React__default.createElement("div", { className: "sendbird-message-input-wrapper__quote-message-input" },
            React__default.createElement(QuoteMessageInput, { replyingMessage: quoteMessage, onClose: function () { return setQuoteMessage(null); } }))),
        showVoiceMessageInput
            ? (React__default.createElement(VoiceMessageInputWrapper, { channel: channel, onSubmitClick: function (recordedFile, duration) {
                    sendVoiceMessage(recordedFile, duration, quoteMessage);
                    setQuoteMessage(null);
                    setShowVoiceMessageInput(false);
                }, onCancelClick: function () {
                    setShowVoiceMessageInput(false);
                } }))
            : (React__default.createElement(MessageInput, { className: "sendbird-message-input-wrapper__message-input", value: value, channelUrl: channel === null || channel === void 0 ? void 0 : channel.url, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, isVoiceMessageEnabled: isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function () {
                    setShowVoiceMessageInput(true);
                }, setMentionedUsers: setMentionedUsers, channel: channel, placeholder: (quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER)
                    || (isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)
                    || (isDisabledBecauseMuted(channel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED)), ref: ref || messageInputRef, disabled: disabled, renderFileUploadIcon: renderFileUploadIcon, renderSendMessageIcon: renderSendMessageIcon, renderVoiceMessageIcon: renderVoiceMessageIcon, onStartTyping: function () {
                    channel === null || channel === void 0 ? void 0 : channel.startTyping();
                }, onSendMessage: function (_a) {
                    var _b;
                    var message = _a.message, mentionTemplate = _a.mentionTemplate;
                    sendMessage({
                        message: message,
                        quoteMessage: quoteMessage,
                        mentionedUsers: mentionedUsers,
                        mentionTemplate: mentionTemplate,
                    });
                    setMentionNickname('');
                    setMentionedUsers([]);
                    setQuoteMessage(null);
                    (_b = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b === void 0 ? void 0 : _b.call(channel);
                }, onFileUpload: function (fileList) {
                    handleUploadFiles(fileList);
                    setQuoteMessage(null);
                }, onUserMentioned: function (user) {
                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
                        setSelectedUser(null);
                        setMentionNickname('');
                    }
                }, onMentionStringChange: function (mentionText) {
                    setMentionNickname(mentionText);
                }, onMentionedUserIdsUpdated: function (userIds) {
                    setMentionedUserIds(userIds);
                }, onKeyDown: function (e) {
                    if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0
                        && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {
                        setMessageInputEvent(e);
                        return true;
                    }
                    return false;
                } }))));
};
var MessageInputWrapper$1 = React__default.forwardRef(MessageInputWrapper);

export { VoiceMessageInputWrapper, MessageInputWrapper$1 as default };
//# sourceMappingURL=MessageInput.js.map
