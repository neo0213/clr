import React__default, { useRef, useContext, useEffect, useMemo, useState } from 'react';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-0IelBspE.js';
import Icon, { IconTypes, IconColors } from '../../ui/Icon.js';
import { A as Avatar } from '../../chunks/bundle-Tep20T57.js';
import { L as LocalizationContext } from '../../chunks/bundle-Xly_X4hP.js';
import { u as uuidv4 } from '../../chunks/bundle-8VA5hO1c.js';
import { u as useChannelContext } from '../../chunks/bundle-QO9wq7-1.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { U as USER_MENTION_TEMP_CHAR, M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from '../../chunks/bundle-YQkYq090.js';
import { M as MessageInputKeys } from '../../chunks/bundle-Jw6D-oM_.js';
import { useThreadContext } from '../../Thread/context.js';
import { b as __awaiter, c as __generator } from '../../chunks/bundle-Y6TqPszM.js';
import '../../chunks/bundle-JuKER7D_.js';
import '../../chunks/bundle-JhG5BHdE.js';
import '../../ui/ImageRenderer.js';
import '../../chunks/bundle-2AUp3oeN.js';
import '../../chunks/bundle-xgxXEKxk.js';
import '../../chunks/bundle-3WQuaADd.js';
import '../../chunks/bundle-menQ38z9.js';
import '../../chunks/bundle-pmVgESW3.js';
import '../../chunks/bundle-ZT6XnGSN.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-zz1eCYds.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-GGcTNRCI.js';
import '../../chunks/bundle-EPtYsHAJ.js';
import '@sendbird/chat/groupChannel';
import '../hooks/useInitialMessagesFetch.js';
import '../../chunks/bundle-7x4clnC7.js';
import '../../chunks/bundle-Sk3SXXP7.js';
import '../../chunks/bundle-pCwi8C-K.js';
import '../../chunks/bundle-EteEacTX.js';
import '../../withSendbird.js';
import '../../Thread/context/types.js';
import '@sendbird/chat';

function SuggestedUserMentionItem(props) {
    var member = props.member, _a = props.isFocused, isFocused = _a === void 0 ? false : _a, parentScrollRef = props.parentScrollRef, onClick = props.onClick, onMouseOver = props.onMouseOver, onMouseMove = props.onMouseMove, renderUserMentionItem = props.renderUserMentionItem;
    var scrollRef = useRef(null);
    var stringSet = useContext(LocalizationContext).stringSet;
    useEffect(function () {
        if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null
            && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop
                || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {
            scrollRef.current.scrollIntoView({ block: 'nearest', inline: 'nearest' });
        }
    }, [isFocused]);
    var customMentionItem = useMemo(function () {
        if (renderUserMentionItem) {
            return (React__default.createElement("div", { className: "sendbird-mention-suggest-list__user-item", onClick: function (event) { return onClick === null || onClick === void 0 ? void 0 : onClick({ event: event, member: member, itemRef: scrollRef }); }, onMouseOver: function (event) { return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event: event, member: member, itemRef: scrollRef }); }, onMouseMove: function (event) { return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event: event, member: member, itemRef: scrollRef }); }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef }, renderUserMentionItem({ user: member })));
        }
    }, [renderUserMentionItem]);
    if (customMentionItem) {
        return customMentionItem;
    }
    return (React__default.createElement("div", { className: "sendbird-mention-suggest-list__user-item ".concat(isFocused ? 'focused' : ''), onClick: function (event) { return onClick === null || onClick === void 0 ? void 0 : onClick({ event: event, member: member, itemRef: scrollRef }); }, onMouseOver: function (event) { return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event: event, member: member, itemRef: scrollRef }); }, onMouseMove: function (event) { return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event: event, member: member, itemRef: scrollRef }); }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef },
        React__default.createElement(Avatar, { className: "sendbird-mention-suggest-list__user-item__avatar", src: member === null || member === void 0 ? void 0 : member.profileUrl, alt: "user-profile", width: "24px", height: "24px" }),
        React__default.createElement(Label, { className: "sendbird-mention-suggest-list__user-item__nickname", type: LabelTypography.SUBTITLE_2, color: (member === null || member === void 0 ? void 0 : member.nickname) ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3 }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)),
        React__default.createElement(Label, { className: "sendbird-mention-suggest-list__user-item__user-id", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, member === null || member === void 0 ? void 0 : member.userId)));
}

function fetchMembersFromChannel(currentUserId, channel, maxSuggestionCount, searchString) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, channel.members
                    .sort(function (a, b) { var _a; return (_a = a.nickname) === null || _a === void 0 ? void 0 : _a.localeCompare(b.nickname); })
                    .filter(function (member) {
                    var _a;
                    return ((_a = member.nickname) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(searchString.toLowerCase()))
                        && member.userId !== currentUserId
                        && member.isActive;
                }).slice(0, maxSuggestionCount)];
        });
    });
}
function fetchMembersFromQuery(currentUserId, channel, maxSuggestionCount, searchString) {
    return __awaiter(this, void 0, void 0, function () {
        var query;
        return __generator(this, function (_a) {
            query = channel.createMemberListQuery({
                limit: maxSuggestionCount + 1,
                nicknameStartsWithFilter: searchString,
            });
            return [2 /*return*/, query.next()
                    .then(function (memberList) {
                    return memberList
                        .filter(function (member) { return currentUserId !== (member === null || member === void 0 ? void 0 : member.userId); })
                        .slice(0, maxSuggestionCount);
                })];
        });
    });
}

var DEBOUNCING_TIME = 300;
function SuggestedMentionList(props) {
    var _a, _b, _c, _d, _e;
    var className = props.className, _f = props.targetNickname, targetNickname = _f === void 0 ? '' : _f, 
    // memberListQuery,
    onUserItemClick = props.onUserItemClick, onFocusItemChange = props.onFocusItemChange, onFetchUsers = props.onFetchUsers, renderUserMentionItem = props.renderUserMentionItem, inputEvent = props.inputEvent, _g = props.ableAddMention, ableAddMention = _g === void 0 ? true : _g, _h = props.maxMentionCount, maxMentionCount = _h === void 0 ? MAX_USER_MENTION_COUNT : _h, _j = props.maxSuggestionCount, maxSuggestionCount = _j === void 0 ? MAX_USER_SUGGESTION_COUNT : _j;
    var currentGroupChannel = (_a = useChannelContext === null || useChannelContext === void 0 ? void 0 : useChannelContext()) === null || _a === void 0 ? void 0 : _a.currentGroupChannel;
    var currentChannel = (_b = useThreadContext === null || useThreadContext === void 0 ? void 0 : useThreadContext()) === null || _b === void 0 ? void 0 : _b.currentChannel;
    var channelInstance = currentGroupChannel || currentChannel;
    var _k = useSendbirdStateContext(), config = _k.config, stores = _k.stores;
    var logger = config.logger;
    var currentUserId = ((_e = (_d = (_c = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk) === null || _d === void 0 ? void 0 : _d.currentUser) === null || _e === void 0 ? void 0 : _e.userId) || '';
    var scrollRef = useRef(null);
    var stringSet = useContext(LocalizationContext).stringSet;
    var _l = useState(null), timer = _l[0], setTimer = _l[1];
    var _m = useState(''), searchString = _m[0], setSearchString = _m[1];
    var _o = useState(''), lastSearchString = _o[0], setLastSearchString = _o[1];
    var _p = useState(null), currentFocusedMember = _p[0], setCurrentFocusedMember = _p[1];
    var _q = useState([]), currentMemberList = _q[0], setCurrentMemberList = _q[1];
    useEffect(function () {
        clearTimeout(timer);
        setTimer(setTimeout(function () {
            setSearchString(targetNickname);
        }, DEBOUNCING_TIME));
    }, [targetNickname]);
    useEffect(function () {
        if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {
            if (currentMemberList.length > 0) {
                onUserItemClick(currentFocusedMember);
            }
        }
        if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {
            var currentUserIndex = currentMemberList.findIndex(function (member) { return ((member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId)); });
            if (0 < currentUserIndex) {
                setCurrentFocusedMember(currentMemberList[currentUserIndex - 1]);
                onFocusItemChange(currentMemberList[currentUserIndex - 1]);
            }
        }
        if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {
            var currentUserIndex = currentMemberList.findIndex(function (member) { return ((member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId)); });
            if (currentUserIndex < currentMemberList.length - 1) {
                setCurrentFocusedMember(currentMemberList[currentUserIndex + 1]);
                onFocusItemChange(currentMemberList[currentUserIndex + 1]);
            }
        }
    }, [inputEvent]);
    useEffect(function () {
        if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {
            // Don't need to request query again
            return;
        }
        if (channelInstance.isSuper) {
            if (!(channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.createMemberListQuery)) {
                logger.warning('SuggestedMentionList: Creating member list query failed');
                return;
            }
        }
        var fetcher = channelInstance.isSuper ? fetchMembersFromQuery : fetchMembersFromChannel;
        fetcher(currentUserId, channelInstance, maxSuggestionCount, searchString.slice(USER_MENTION_TEMP_CHAR.length))
            .then(function (suggestingMembers) {
            if (suggestingMembers.length < 1) {
                logger.info('SuggestedMentionList: Fetched member list is empty');
            }
            else {
                logger.info('SuggestedMentionList: Fetching member list succeeded', { memberList: suggestingMembers });
                setCurrentFocusedMember(suggestingMembers[0]);
            }
            setLastSearchString(searchString);
            onFetchUsers(suggestingMembers);
            setCurrentMemberList(suggestingMembers);
        })
            .catch(function (error) {
            if (error) {
                logger.error('SuggestedMentionList: Fetching member list failed', error);
            }
        });
    }, [
        channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.url,
        // We have to be specific like this or React would not recognize the changes in instances.
        channelInstance.members.map(function (member) { return member.nickname; }).join(),
        channelInstance.members.map(function (member) { return member.isActive; }).join(),
        searchString,
        maxSuggestionCount,
        currentUserId,
        currentMemberList.length,
        lastSearchString,
    ]);
    if (!ableAddMention && currentMemberList.length === 0) {
        return null;
    }
    return (React__default.createElement("div", { className: "sendbird-mention-suggest-list ".concat(className), key: "sendbird-mention-suggest-list", ref: scrollRef },
        ableAddMention && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(function (member) { return (React__default.createElement(SuggestedUserMentionItem, { key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), member: member, isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId), parentScrollRef: scrollRef, onClick: function (_a) {
                var member = _a.member;
                onUserItemClick(member);
            }, onMouseOver: function (_a) {
                var member = _a.member;
                setCurrentFocusedMember(member);
            }, renderUserMentionItem: renderUserMentionItem })); })),
        !ableAddMention && (React__default.createElement("div", { className: "sendbird-mention-suggest-list__notice-item" },
            React__default.createElement(Icon, { className: "sendbird-mention-suggest-list__notice-item__icon", type: IconTypes.INFO, fillColor: IconColors.ON_BACKGROUND_2, width: "20px", height: "20px" }),
            React__default.createElement(Label, { className: "sendbird-mention-suggest-list__notice-item__text", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.MENTION_COUNT__OVER_LIMIT.replace('%d', String(maxMentionCount)))))));
}

export { SuggestedMentionList as default };
//# sourceMappingURL=SuggestedMentionList.js.map
