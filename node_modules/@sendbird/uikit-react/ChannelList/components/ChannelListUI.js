import React__default, { useState } from 'react';
import ChannelListHeader from './ChannelListHeader.js';
import { AddChannel } from './AddChannel.js';
import ChannelPreview from './ChannelPreview.js';
import ChannelPreviewAction from './ChannelPreviewAction.js';
import { u as useChannelListContext, L as LEAVE_CHANNEL_SUCCESS, S as SET_CURRENT_CHANNEL } from '../../chunks/bundle-Xq25cpwP.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import EditUserProfile from '../../EditUserProfile.js';
import PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder.js';
import { i as isAboutSame } from '../../chunks/bundle-JhG5BHdE.js';
import '../../chunks/bundle-Xly_X4hP.js';
import '../../chunks/bundle-JuKER7D_.js';
import '../../chunks/bundle-xgxXEKxk.js';
import '../../chunks/bundle-0IelBspE.js';
import '../../chunks/bundle-Y6TqPszM.js';
import '../../chunks/bundle-Tep20T57.js';
import '../../ui/ImageRenderer.js';
import '../../chunks/bundle-8VA5hO1c.js';
import '../../chunks/bundle-2AUp3oeN.js';
import '../../ui/Icon.js';
import '../../ui/IconButton.js';
import '../../CreateChannel.js';
import '../../CreateChannel/components/CreateChannelUI.js';
import '../../chunks/bundle-s3qW-HFQ.js';
import '../../sendbirdSelectors.js';
import '../../chunks/bundle-7x4clnC7.js';
import '../../CreateChannel/components/InviteUsers.js';
import '../../chunks/bundle-5JvP07dI.js';
import 'react-dom';
import '../../chunks/bundle-Mn36ivpf.js';
import '../../ui/Button.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-3WQuaADd.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../ui/ContextMenu.js';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-ZT6XnGSN.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-zz1eCYds.js';
import '../../CreateChannel/components/SelectChannelType.js';
import '../../ui/ChannelAvatar.js';
import '../../chunks/bundle-dJBzT033.js';
import '../../ui/Badge.js';
import '../../chunks/bundle-l0M5nN1Q.js';
import '../../chunks/bundle-pmVgESW3.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-oghsyfOE.js';
import '../../chunks/bundle-6uVd8Nrl.js';
import '../../ui/MentionUserLabel.js';
import '../../chunks/bundle-2YEsND5T.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-LhtrqZSE.js';
import '../../Channel/components/TypingIndicator.js';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-QO9wq7-1.js';
import '../../chunks/bundle-YQkYq090.js';
import '../../chunks/bundle-menQ38z9.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-GGcTNRCI.js';
import '../../chunks/bundle-EPtYsHAJ.js';
import '../../Channel/hooks/useInitialMessagesFetch.js';
import '../../chunks/bundle-Sk3SXXP7.js';
import '../../chunks/bundle-pCwi8C-K.js';
import '../../chunks/bundle-EteEacTX.js';
import '../../chunks/bundle-cJc3JBZb.js';
import '../../withSendbird.js';
import '../../EditUserProfile/context.js';
import '../../EditUserProfile/components/EditUserProfileUI.js';
import '../../ui/Input.js';
import '../../chunks/bundle-IeIHBN9i.js';

var ChannelListUI = function (props) {
    var _a;
    var renderHeader = props.renderHeader, renderChannelPreview = props.renderChannelPreview, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;
    var _b = useState(false), showProfileEdit = _b[0], setShowProfileEdit = _b[1];
    var _c = useChannelListContext(), onThemeChange = _c.onThemeChange, allowProfileEdit = _c.allowProfileEdit, allChannels = _c.allChannels, loading = _c.loading, currentChannel = _c.currentChannel, channelListDispatcher = _c.channelListDispatcher, typingChannels = _c.typingChannels, initialized = _c.initialized, fetchChannelList = _c.fetchChannelList, onProfileEditSuccess = _c.onProfileEditSuccess;
    var state = useSendbirdStateContext();
    var sdkStore = (_a = state === null || state === void 0 ? void 0 : state.stores) === null || _a === void 0 ? void 0 : _a.sdkStore;
    var config = state === null || state === void 0 ? void 0 : state.config;
    var logger = config.logger, _d = config.isOnline, isOnline = _d === void 0 ? false : _d;
    var sdkError = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.error;
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement("div", { className: "sendbird-channel-list__header" }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || (React__default.createElement(ChannelListHeader, { onEdit: function () {
                if (allowProfileEdit) {
                    setShowProfileEdit(true);
                }
            }, allowProfileEdit: allowProfileEdit, renderIconButton: function () { return (React__default.createElement(AddChannel, null)); } }))),
        showProfileEdit && (React__default.createElement(EditUserProfile, { onThemeChange: onThemeChange, onCancel: function () { setShowProfileEdit(false); }, onEditProfile: function (user) {
                setShowProfileEdit(false);
                onProfileEditSuccess(user);
            } })),
        React__default.createElement("div", { className: "sendbird-channel-list__body", onScroll: function (e) {
                var target = e === null || e === void 0 ? void 0 : e.target;
                if (isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10)) {
                    fetchChannelList();
                }
            } },
            (sdkError && !loading) && ((renderPlaceHolderError && typeof renderPlaceHolderError === 'function') ? (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) : (React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG }))),
            React__default.createElement("div", null, allChannels && allChannels.map(function (channel, idx) {
                // todo: Refactor and move this inside channel - preview
                var onLeaveChannel = function (c, cb) {
                    logger.info('ChannelList: Leaving channel', c);
                    c.leave()
                        .then(function (res) {
                        logger.info('ChannelList: Leaving channel success', res);
                        if (cb && typeof cb === 'function') {
                            cb(res, null);
                        }
                        channelListDispatcher({
                            type: LEAVE_CHANNEL_SUCCESS,
                            payload: channel === null || channel === void 0 ? void 0 : channel.url,
                        });
                    })
                        .catch(function (err) {
                        logger.error('ChannelList: Leaving channel failed', err);
                        if (cb && typeof cb === 'function') {
                            cb(null, err);
                        }
                    });
                };
                var onClick = function () {
                    if (!isOnline) {
                        return;
                    }
                    logger.info('ChannelList: Clicked on channel:', channel);
                    channelListDispatcher({
                        type: SET_CURRENT_CHANNEL,
                        payload: channel,
                    });
                };
                return ((renderChannelPreview)
                    ? (
                    // eslint-disable-next-line
                    React__default.createElement("div", { key: channel === null || channel === void 0 ? void 0 : channel.url, onClick: onClick }, renderChannelPreview({ channel: channel, onLeaveChannel: onLeaveChannel })))
                    : (React__default.createElement(ChannelPreview, { key: channel === null || channel === void 0 ? void 0 : channel.url, tabIndex: idx, onClick: onClick, channel: channel, onLeaveChannel: function () { return onLeaveChannel(channel, null); }, isActive: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url), isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function (_a) {
                            var url = _a.url;
                            return url === (channel === null || channel === void 0 ? void 0 : channel.url);
                        }), renderChannelAction: (function () { return (React__default.createElement(ChannelPreviewAction, { channel: channel, disabled: !isOnline, onLeaveChannel: function () { return onLeaveChannel(channel, null); } })); }) })));
            })),
            (!initialized && loading) && ((renderPlaceHolderLoading && typeof renderPlaceHolderLoading === 'function') ? (renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading()) : (React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }))),
            (initialized && (allChannels === null || allChannels === void 0 ? void 0 : allChannels.length) === 0) && ((renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === 'function') ? (renderPlaceHolderEmptyList === null || renderPlaceHolderEmptyList === void 0 ? void 0 : renderPlaceHolderEmptyList()) : (React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS }))))));
};

export { ChannelListUI as default };
//# sourceMappingURL=ChannelListUI.js.map
