import { _ as __assign } from '../../chunks/bundle-Y6TqPszM.js';
import React__default, { useState } from 'react';
import ChannelAvatar from '../../ui/ChannelAvatar.js';
import Badge from '../../ui/Badge.js';
import Icon, { IconTypes, IconColors } from '../../ui/Icon.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../chunks/bundle-0IelBspE.js';
import { g as getChannelTitle, a as getTotalMembers, M as MessageStatus, b as getLastMessageCreatedAt, c as getLastMessage, d as getChannelUnreadMessageCount } from '../../chunks/bundle-l0M5nN1Q.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { u as useLocalization } from '../../chunks/bundle-Xly_X4hP.js';
import MentionUserLabel from '../../ui/MentionUserLabel.js';
import { M as Modal } from '../../chunks/bundle-5JvP07dI.js';
import TextButton from '../../ui/TextButton.js';
import { u as useChannelListContext } from '../../chunks/bundle-Xq25cpwP.js';
import { TypingIndicatorText } from '../../Channel/components/TypingIndicator.js';
import { i as isVoiceMessage } from '../../chunks/bundle-ZT6XnGSN.js';
import { u as useMediaQueryContext } from '../../chunks/bundle-Mn36ivpf.js';
import { u as useLongPress } from '../../chunks/bundle-cJc3JBZb.js';
import '../../chunks/bundle-Tep20T57.js';
import '../../ui/ImageRenderer.js';
import '../../chunks/bundle-8VA5hO1c.js';
import '../../chunks/bundle-2AUp3oeN.js';
import '../../chunks/bundle-dJBzT033.js';
import '../../chunks/bundle-JhG5BHdE.js';
import '../../chunks/bundle-JuKER7D_.js';
import '../../chunks/bundle-pmVgESW3.js';
import '../../chunks/bundle-xgxXEKxk.js';
import '../../ui/Loader.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-oghsyfOE.js';
import '../../chunks/bundle-6uVd8Nrl.js';
import '../../withSendbird.js';
import '../../chunks/bundle-2YEsND5T.js';
import 'react-dom';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-LhtrqZSE.js';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-7x4clnC7.js';
import '../../chunks/bundle-Sk3SXXP7.js';
import '../../chunks/bundle-3WQuaADd.js';
import '../../chunks/bundle-zz1eCYds.js';
import '../../chunks/bundle-QO9wq7-1.js';
import '../../chunks/bundle-YQkYq090.js';
import '../../chunks/bundle-menQ38z9.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-GGcTNRCI.js';
import '../../chunks/bundle-EPtYsHAJ.js';
import '../../Channel/hooks/useInitialMessagesFetch.js';
import '../../chunks/bundle-pCwi8C-K.js';
import '../../chunks/bundle-EteEacTX.js';

var ChannelPreview = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var channel = _a.channel, _l = _a.isActive, isActive = _l === void 0 ? false : _l, _m = _a.isTyping, isTyping = _m === void 0 ? false : _m, renderChannelAction = _a.renderChannelAction, onLeaveChannel = _a.onLeaveChannel, onClick = _a.onClick, tabIndex = _a.tabIndex;
    var sbState = useSendbirdStateContext();
    var _o = useChannelListContext(), _p = _o.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _p === void 0 ? false : _p, _q = _o.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _q === void 0 ? false : _q;
    var _r = useLocalization(), dateLocale = _r.dateLocale, stringSet = _r.stringSet;
    var isMobile = useMediaQueryContext().isMobile;
    var _s = useState(false), showMobileLeave = _s[0], setShowMobileLeave = _s[1];
    var userId = (_d = (_c = (_b = sbState === null || sbState === void 0 ? void 0 : sbState.stores) === null || _b === void 0 ? void 0 : _b.userStore) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.userId;
    var theme = (_e = sbState === null || sbState === void 0 ? void 0 : sbState.config) === null || _e === void 0 ? void 0 : _e.theme;
    var isMentionEnabled = (_f = sbState === null || sbState === void 0 ? void 0 : sbState.config) === null || _f === void 0 ? void 0 : _f.isMentionEnabled;
    var isFrozen = (channel === null || channel === void 0 ? void 0 : channel.isFrozen) || false;
    var isBroadcast = (channel === null || channel === void 0 ? void 0 : channel.isBroadcast) || false;
    var isChannelTyping = isTypingIndicatorEnabled && isTyping;
    var isMessageStatusEnabled = isMessageReceiptStatusEnabled
        && (((_g = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _g === void 0 ? void 0 : _g.messageType) === 'user' || ((_h = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _h === void 0 ? void 0 : _h.messageType) === 'file')
        && ((_k = (_j = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _j === void 0 ? void 0 : _j.sender) === null || _k === void 0 ? void 0 : _k.userId) === userId;
    var onLongPress = useLongPress({
        onLongPress: function () {
            if (isMobile) {
                setShowMobileLeave(true);
            }
        },
        onClick: onClick,
    }, {
        delay: 1000,
    });
    var channelName = getChannelTitle(channel, userId, stringSet);
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement("div", __assign({ className: [
                'sendbird-channel-preview',
                isActive ? 'sendbird-channel-preview--active' : '',
            ].join(' '), role: "link", tabIndex: tabIndex }, (isMobile ? __assign({}, onLongPress) : { onClick: onClick })),
            React__default.createElement("div", { className: "sendbird-channel-preview__avatar" },
                React__default.createElement(ChannelAvatar, { channel: channel, userId: userId, theme: theme })),
            React__default.createElement("div", { className: "sendbird-channel-preview__content" },
                React__default.createElement("div", { className: "sendbird-channel-preview__content__upper" },
                    React__default.createElement("div", { className: "sendbird-channel-preview__content__upper__header" },
                        isBroadcast
                            && (React__default.createElement("div", { className: "sendbird-channel-preview__content__upper__header__broadcast-icon" },
                                React__default.createElement(Icon, { type: IconTypes.BROADCAST, fillColor: IconColors.SECONDARY, height: "16px", width: "16px" }))),
                        React__default.createElement(Label, { className: "sendbird-channel-preview__content__upper__header__channel-name", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, channelName),
                        React__default.createElement(Label, { className: "sendbird-channel-preview__content__upper__header__total-members", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, getTotalMembers(channel)),
                        isFrozen
                            && (React__default.createElement("div", { title: "Frozen", className: "sendbird-channel-preview__content__upper__header__frozen-icon" },
                                React__default.createElement(Icon, { type: IconTypes.FREEZE, fillColor: IconColors.PRIMARY, height: 12, width: 12 })))),
                    (!(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isMessageStatusEnabled) && (React__default.createElement(MessageStatus, { className: "sendbird-channel-preview__content__upper__last-message-at", channel: channel, message: channel === null || channel === void 0 ? void 0 : channel.lastMessage, isDateSeparatorConsidered: false })),
                    (!(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isMessageStatusEnabled) && (React__default.createElement(Label, { className: "sendbird-channel-preview__content__upper__last-message-at", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, getLastMessageCreatedAt({
                        channel: channel,
                        locale: dateLocale,
                        stringSet: stringSet,
                    })))),
                React__default.createElement("div", { className: "sendbird-channel-preview__content__lower" },
                    React__default.createElement(Label, { className: "sendbird-channel-preview__content__lower__last-message", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 },
                        isChannelTyping && (React__default.createElement(TypingIndicatorText, { members: channel === null || channel === void 0 ? void 0 : channel.getTypingUsers() })),
                        !isChannelTyping && !isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && (getLastMessage(channel, stringSet)),
                        !isChannelTyping && isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && (stringSet.VOICE_MESSAGE)),
                    /**
                     * Do not show unread count for focused channel. This is because of the limitation where
                     * isScrollBottom and hasNext states needs to be added globally but they are from channel context
                     * so channel list cannot see them with the current architecture.
                     */
                    !isActive && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && (React__default.createElement("div", { className: "sendbird-channel-preview__content__lower__unread-message-count" },
                        (isMentionEnabled && (channel === null || channel === void 0 ? void 0 : channel.unreadMentionCount) > 0)
                            ? (React__default.createElement(MentionUserLabel, { className: "sendbird-channel-preview__content__lower__unread-message-count__mention", color: "purple" }, '@'))
                            : null,
                        getChannelUnreadMessageCount(channel) // return number
                            ? React__default.createElement(Badge, { count: getChannelUnreadMessageCount(channel) })
                            : null)))),
            !isMobile && (React__default.createElement("div", { className: "sendbird-channel-preview__action" }, renderChannelAction({ channel: channel })))),
        showMobileLeave && isMobile && (React__default.createElement(Modal, { className: "sendbird-channel-preview__leave--mobile", titleText: channelName, hideFooter: true, isCloseOnClickOutside: true, onCancel: function () { return setShowMobileLeave(false); } },
            React__default.createElement(TextButton, { onClick: function () {
                    onLeaveChannel();
                    setShowMobileLeave(false);
                }, className: "sendbird-channel-preview__leave-label--mobile" },
                React__default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))))));
};

export { ChannelPreview as default };
//# sourceMappingURL=ChannelPreview.js.map
