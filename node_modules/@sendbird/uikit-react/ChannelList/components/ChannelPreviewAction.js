import React__default, { useRef, useState, useContext } from 'react';
import { u as useLocalization, L as LocalizationContext } from '../../chunks/bundle-Xly_X4hP.js';
import ContextMenu, { MenuItems, MenuItem } from '../../ui/ContextMenu.js';
import IconButton from '../../ui/IconButton.js';
import Icon, { IconTypes, IconColors } from '../../ui/Icon.js';
import { useSendbirdStateContext } from '../../useSendbirdStateContext.js';
import { n as noop } from '../../chunks/bundle-JhG5BHdE.js';
import { M as Modal } from '../../chunks/bundle-5JvP07dI.js';
import { u as useChannelListContext } from '../../chunks/bundle-Xq25cpwP.js';
import '../../chunks/bundle-JuKER7D_.js';
import '../../chunks/bundle-xgxXEKxk.js';
import '../../chunks/bundle-Y6TqPszM.js';
import 'react-dom';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-8VA5hO1c.js';
import '../../chunks/bundle-ZT6XnGSN.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-zz1eCYds.js';
import '../../chunks/bundle-0IelBspE.js';
import '../../withSendbird.js';
import '../../chunks/bundle-Mn36ivpf.js';
import '../../ui/Button.js';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-7x4clnC7.js';
import '../../chunks/bundle-Sk3SXXP7.js';
import '../../chunks/bundle-3WQuaADd.js';

var LeaveChannel = function (props) {
    var _a, _b, _c;
    var _d = props.channel, channel = _d === void 0 ? null : _d, _e = props.onSubmit, onSubmit = _e === void 0 ? noop : _e, _f = props.onCancel, onCancel = _f === void 0 ? noop : _f;
    var channelFromContext = (_a = useChannelListContext()) === null || _a === void 0 ? void 0 : _a.currentChannel;
    var leavingChannel = channel || channelFromContext;
    var state = useSendbirdStateContext();
    var stringSet = useLocalization().stringSet;
    var logger = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.logger;
    var isOnline = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.isOnline;
    if (leavingChannel) {
        return (React__default.createElement(Modal, { disabled: !isOnline, onCancel: onCancel, onSubmit: function () {
                logger.info('ChannelSettings: Leaving channel', leavingChannel);
                leavingChannel === null || leavingChannel === void 0 ? void 0 : leavingChannel.leave().then(function () {
                    logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);
                    onSubmit();
                });
            }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE }));
    }
};

function ChannelPreviewAction(_a) {
    var channel = _a.channel, _b = _a.disabled, disabled = _b === void 0 ? false : _b, onLeaveChannel = _a.onLeaveChannel;
    var parentRef = useRef(null);
    var parentContainerRef = useRef(null);
    var _c = useState(false), showModal = _c[0], setShowModal = _c[1];
    var stringSet = useContext(LocalizationContext).stringSet;
    return (React__default.createElement("div", { ref: parentContainerRef, tabIndex: 0, role: "button", style: { display: 'inline-block' }, onKeyDown: function (e) { return e.stopPropagation(); }, onClick: function (e) { return e.stopPropagation(); } },
        React__default.createElement(ContextMenu, { menuTrigger: function (toggleDropdown) { return (React__default.createElement(IconButton, { ref: parentRef, onClick: toggleDropdown, height: "32px", width: "32px" },
                React__default.createElement(Icon, { type: IconTypes.MORE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }))); }, menuItems: function (closeDropdown) { return (React__default.createElement(MenuItems, { parentRef: parentRef, parentContainRef: parentContainerRef, closeDropdown: closeDropdown },
                React__default.createElement(MenuItem, { onClick: function () {
                        if (disabled) {
                            return;
                        }
                        setShowModal(true);
                        closeDropdown();
                    }, dataSbId: "channel_list_item_context_menu_leave_channel" }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE))); } }),
        showModal && (React__default.createElement(LeaveChannel, { channel: channel, onSubmit: function () {
                setShowModal(false);
                onLeaveChannel();
            }, onCancel: function () { return setShowModal(false); } }))));
}

export { ChannelPreviewAction as default };
//# sourceMappingURL=ChannelPreviewAction.js.map
