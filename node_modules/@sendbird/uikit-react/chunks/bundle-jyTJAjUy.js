import React__default, { useRef, useState, useEffect } from 'react';
import { u as useLocalization } from './bundle-Xly_X4hP.js';
import { useVoicePlayer } from '../VoicePlayer/useVoicePlayer.js';
import { useVoiceRecorder, VoiceRecorderStatus } from '../VoiceRecorder/useVoiceRecorder.js';
import { i as isDisabledBecauseFrozen, b as isDisabledBecauseMuted } from './bundle-menQ38z9.js';
import { V as VoiceMessageInputStatus, a as VoiceMessageInput } from './bundle-nHhZeAVb.js';
import { M as Modal } from './bundle-5JvP07dI.js';
import Button, { ButtonTypes, ButtonSizes } from '../ui/Button.js';
import { useSendbirdStateContext } from '../useSendbirdStateContext.js';
import { c as VOICE_RECORDER_DEFAULT_MIN } from './bundle-Sk3SXXP7.js';
import { V as VOICE_PLAYER_STATUS } from './bundle-Ku1a64TD.js';
import { u as uuidv4 } from './bundle-8VA5hO1c.js';

var VoiceMessageInputWrapper = function (_a) {
    var _b;
    var channel = _a.channel, onCancelClick = _a.onCancelClick, onSubmitClick = _a.onSubmitClick;
    var uuid = useRef(uuidv4()).current;
    var _c = useState(null), audioFile = _c[0], setAudioFile = _c[1];
    var _d = useState(VoiceMessageInputStatus.READY_TO_RECORD), voiceInputState = _d[0], setVoiceInputState = _d[1];
    var _e = useState(false), isSubmitted = _e[0], setSubmit = _e[1];
    var _f = useState(false), isDisabled = _f[0], setDisabled = _f[1];
    var _g = useState(false), showModal = _g[0], setShowModal = _g[1];
    var stringSet = useLocalization().stringSet;
    var config = useSendbirdStateContext().config;
    var minRecordingTime = ((_b = config === null || config === void 0 ? void 0 : config.voiceRecord) === null || _b === void 0 ? void 0 : _b.minRecordingTime) || VOICE_RECORDER_DEFAULT_MIN;
    var _h = useVoiceRecorder({
        onRecordingStarted: function () {
            setVoiceInputState(VoiceMessageInputStatus.RECORDING);
        },
        onRecordingEnded: function (audioFile) {
            setAudioFile(audioFile);
        },
    }), start = _h.start, stop = _h.stop, cancel = _h.cancel, recordingTime = _h.recordingTime, recordingStatus = _h.recordingStatus, recordingLimit = _h.recordingLimit;
    var voicePlayer = useVoicePlayer({
        channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
        key: uuid,
        audioFile: audioFile,
    });
    var play = voicePlayer.play, pause = voicePlayer.pause, playbackTime = voicePlayer.playbackTime, playingStatus = voicePlayer.playingStatus;
    var stopVoicePlayer = voicePlayer.stop;
    // disabled state: muted & frozen
    useEffect(function () {
        if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {
            setDisabled(true);
        }
        else {
            setDisabled(false);
        }
    }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);
    // call onSubmitClick when submit button is clicked and recorded audio file is created
    useEffect(function () {
        if (isSubmitted && audioFile) {
            onSubmitClick(audioFile, recordingTime);
            setSubmit(false);
            setAudioFile(null);
        }
    }, [isSubmitted, audioFile, recordingTime]);
    // operate which control button should be displayed
    useEffect(function () {
        if (audioFile) {
            if (recordingTime < minRecordingTime) {
                setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
                setAudioFile(null);
            }
            else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {
                setVoiceInputState(VoiceMessageInputStatus.PLAYING);
            }
            else {
                setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);
            }
        }
    }, [audioFile, recordingTime, playingStatus]);
    return (React__default.createElement("div", { className: "sendbird-voice-message-input-wrapper" },
        React__default.createElement(VoiceMessageInput, { currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime, maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit, currentType: voiceInputState, onCancelClick: function () {
                onCancelClick();
                cancel();
                stopVoicePlayer();
            }, onSubmitClick: function () {
                if (isDisabled) {
                    setShowModal(true);
                    setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
                }
                else {
                    stop();
                    pause();
                    setSubmit(true);
                }
            }, onControlClick: function (type) {
                switch (type) {
                    case VoiceMessageInputStatus.READY_TO_RECORD: {
                        stopVoicePlayer();
                        start();
                        break;
                    }
                    case VoiceMessageInputStatus.RECORDING: {
                        if (recordingTime >= minRecordingTime && !isDisabled) {
                            stop();
                        }
                        else if (isDisabled) {
                            cancel();
                            setShowModal(true);
                            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
                        }
                        else {
                            cancel();
                            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
                        }
                        break;
                    }
                    case VoiceMessageInputStatus.READY_TO_PLAY: {
                        play();
                        break;
                    }
                    case VoiceMessageInputStatus.PLAYING: {
                        pause();
                        break;
                    }
                }
            } }),
        showModal && (React__default.createElement(Modal, { className: "sendbird-voice-message-input-wrapper-alert", titleText: isDisabledBecauseMuted(channel)
                ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED
                : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN, hideFooter: true, isCloseOnClickOutside: true, onCancel: function () {
                setShowModal(false);
                onCancelClick();
            } },
            React__default.createElement("div", { className: "sendbird-voice-message-input-wrapper-alert__body" },
                React__default.createElement(Button, { className: "sendbird-voice-message-input-wrapper-alert__body__ok-button", type: ButtonTypes.PRIMARY, size: ButtonSizes.BIG, onClick: function () {
                        setShowModal(false);
                        onCancelClick();
                    } }, stringSet.BUTTON__OK))))));
};

export { VoiceMessageInputWrapper as V };
//# sourceMappingURL=bundle-jyTJAjUy.js.map
