import React__default, { useState, useEffect } from 'react';
import { u as useChannelContext } from './bundle-QO9wq7-1.js';
import PlaceHolder, { PlaceHolderTypes } from '../ui/PlaceHolder.js';
import Icon, { IconTypes, IconColors } from '../ui/Icon.js';
import Message from '../Channel/components/Message.js';
import { e as isAboutSame, s as scrollIntoLast } from './bundle-menQ38z9.js';
import { getMessagePartsInfo } from '../Channel/utils/getMessagePartsInfo.js';
import UnreadCount from '../Channel/components/UnreadCount.js';
import FrozenNotification from '../Channel/components/FrozenNotification.js';
import { S as SCROLL_BUFFER } from './bundle-Sk3SXXP7.js';
import { useSendbirdStateContext } from '../useSendbirdStateContext.js';
import { MessageProvider } from '../Message/context.js';
import { a as useDebounce, u as useHandleOnScrollCallback } from './bundle-Nv1SlZSC.js';
import TypingIndicatorBubble from '../ui/TypingIndicatorBubble.js';
import { usePreservedCallback } from '@sendbird/uikit-tools';

var TypingIndicatorType;
(function (TypingIndicatorType) {
    TypingIndicatorType["Text"] = "text";
    TypingIndicatorType["Bubble"] = "bubble";
})(TypingIndicatorType || (TypingIndicatorType = {}));

var DELAY = 500;
function useSetScrollToBottom(_a) {
    var loading = _a.loading;
    var _b = useState(0), scrollBottom = _b[0], setScrollBottom = _b[1];
    useEffect(function () {
        if (loading) {
            setScrollBottom(0);
        }
    }, [loading]);
    var scrollCb = function (e) {
        var element = e.target;
        try {
            setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);
        }
        catch (_a) {
            //
        }
    };
    return {
        scrollBottom: scrollBottom,
        scrollToBottomHandler: useDebounce(scrollCb, DELAY),
    };
}

function useScrollBehavior() {
    var _a = useChannelContext(), scrollRef = _a.scrollRef, _b = _a.scrollBehavior, scrollBehavior = _b === void 0 ? 'auto' : _b;
    useEffect(function () {
        if (scrollRef.current) {
            scrollRef.current.style.scrollBehavior = scrollBehavior;
        }
    }, [scrollRef.current]);
    return null;
}

var BUFFER_DELAY = 500;
function useOnScrollPositionChangeDetector(props) {
    var onReachedTop = props.onReachedTop, onReachedBottom = props.onReachedBottom, onInBetween = props.onInBetween;
    var cb = usePreservedCallback(function (event) {
        if (event === null || event === void 0 ? void 0 : event.target) {
            var _a = event.target, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
            if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
                onReachedTop();
            }
            else if (isAboutSame(scrollHeight, clientHeight + scrollTop, SCROLL_BUFFER)) {
                onReachedBottom();
            }
            else {
                onInBetween();
            }
        }
    });
    return useDebounce(cb, BUFFER_DELAY);
}

var SCROLL_BOTTOM_PADDING = 50;
var MessageList = function (_a) {
    var _b, _c, _d, _e, _f;
    var _g = _a.className, className = _g === void 0 ? '' : _g, renderMessage = _a.renderMessage, renderPlaceholderEmpty = _a.renderPlaceholderEmpty, renderCustomSeparator = _a.renderCustomSeparator, renderPlaceholderLoader = _a.renderPlaceholderLoader, renderFrozenNotification = _a.renderFrozenNotification;
    var _h = useChannelContext(), allMessages = _h.allMessages, localMessages = _h.localMessages, hasMorePrev = _h.hasMorePrev, hasMoreNext = _h.hasMoreNext, setInitialTimeStamp = _h.setInitialTimeStamp, setAnimatedMessageId = _h.setAnimatedMessageId, setHighLightedMessageId = _h.setHighLightedMessageId, isMessageGroupingEnabled = _h.isMessageGroupingEnabled, scrollRef = _h.scrollRef, onScrollCallback = _h.onScrollCallback, onScrollDownCallback = _h.onScrollDownCallback, messagesDispatcher = _h.messagesDispatcher, messageActionTypes = _h.messageActionTypes, currentGroupChannel = _h.currentGroupChannel, disableMarkAsRead = _h.disableMarkAsRead, filterMessageList = _h.filterMessageList, replyType = _h.replyType, loading = _h.loading, isScrolled = _h.isScrolled, unreadSince = _h.unreadSince, unreadSinceDate = _h.unreadSinceDate, typingMembers = _h.typingMembers;
    var store = useSendbirdStateContext();
    var allMessagesFiltered = (typeof filterMessageList === 'function')
        ? allMessages.filter(filterMessageList)
        : allMessages;
    var markAsReadScheduler = store.config.markAsReadScheduler;
    var _j = useState(false), isScrollBottom = _j[0], setIsScrollBottom = _j[1];
    useScrollBehavior();
    var onScroll = function () {
        var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
        if (element == null) {
            return;
        }
        var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;
        if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
            onScrollCallback();
        }
        if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && hasMoreNext) {
            onScrollDownCallback(function (_a) {
                var messages = _a[0];
                if (messages) {
                    try {
                        setTimeout(function () { return scrollIntoLast(0, scrollRef); }, 
                        /**
                         * Rendering MFM takes long time so we need this.
                         * But later we should find better solution.
                         */
                        1000);
                        // element.scrollTop = scrollHeight - clientHeight;
                        // scrollRef.current.scrollTop = scrollHeight - clientHeight;
                    }
                    catch (error) {
                        //
                    }
                }
            });
        }
        if (!disableMarkAsRead
            && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)
            && !!currentGroupChannel) {
            messagesDispatcher({
                type: messageActionTypes.MARK_AS_READ,
                payload: { channel: currentGroupChannel },
            });
            markAsReadScheduler.push(currentGroupChannel);
        }
    };
    var onClickScrollBot = function () {
        var _a, _b, _c, _d, _e;
        setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);
        setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);
        setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);
        if (((_a = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _a === void 0 ? void 0 : _a.scrollTop) > -1) {
            scrollRef.current.scrollTop = ((_c = (_b = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _b === void 0 ? void 0 : _b.scrollHeight) !== null && _c !== void 0 ? _c : 0) - ((_e = (_d = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0);
        }
    };
    /**
     * 1. Move the messsage list scroll
     *    when each message's height is changed by `reactions` OR `showEdit`
     * 2. Keep the scrollBottom value after fetching new message list
     */
    var moveScroll = function (isBottomMessageAffected) {
        if (isBottomMessageAffected === void 0) { isBottomMessageAffected = false; }
        var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
        if (current) {
            var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
            if (scrollBottom < bottom
                && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {
                // Move the scroll as much as the height of the message has changed
                current.scrollTop += bottom - scrollBottom;
            }
        }
    };
    var handleOnScroll = useHandleOnScrollCallback({
        hasMore: hasMorePrev,
        hasNext: hasMoreNext,
        onScroll: onScroll,
        scrollRef: scrollRef,
    });
    var onScrollReachedEndDetector = useOnScrollPositionChangeDetector({
        onReachedBottom: function () {
            /**
             * Note that this event is already being called in onScroll() above. However, it is only being called when
             * hasMoreNext is true but it needs to be called when hasNext is false when reached bottom as well.
             */
            if (!hasMoreNext && !disableMarkAsRead && !!currentGroupChannel) {
                messagesDispatcher({
                    type: messageActionTypes.MARK_AS_READ,
                    payload: { channel: currentGroupChannel },
                });
                markAsReadScheduler.push(currentGroupChannel);
            }
            setIsScrollBottom(true);
        },
        onReachedTop: function () {
            setIsScrollBottom(false);
        },
        onInBetween: function () {
            setIsScrollBottom(false);
        },
    });
    var _k = useSetScrollToBottom({ loading: loading }), scrollToBottomHandler = _k.scrollToBottomHandler, scrollBottom = _k.scrollBottom;
    if (loading) {
        return (typeof renderPlaceholderLoader === 'function')
            ? renderPlaceholderLoader()
            : React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
    }
    if (allMessagesFiltered.length < 1) {
        if (renderPlaceholderEmpty && typeof renderPlaceholderEmpty === 'function') {
            return renderPlaceholderEmpty();
        }
        return React__default.createElement(PlaceHolder, { className: "sendbird-conversation__no-messages", type: PlaceHolderTypes.NO_MESSAGES });
    }
    return (React__default.createElement(React__default.Fragment, null,
        !isScrolled && React__default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }),
        React__default.createElement("div", { className: "sendbird-conversation__messages ".concat(className) },
            React__default.createElement("div", { className: "sendbird-conversation__scroll-container" },
                React__default.createElement("div", { className: "sendbird-conversation__padding" }),
                React__default.createElement("div", { className: "sendbird-conversation__messages-padding", ref: scrollRef, onScroll: function (e) {
                        handleOnScroll();
                        scrollToBottomHandler(e);
                        onScrollReachedEndDetector(e);
                    } },
                    allMessagesFiltered.map(function (m, idx) {
                        var _a, _b;
                        var _c = getMessagePartsInfo({
                            allMessages: allMessagesFiltered,
                            replyType: replyType,
                            isMessageGroupingEnabled: isMessageGroupingEnabled,
                            currentIndex: idx,
                            currentMessage: m,
                            currentChannel: currentGroupChannel,
                        }), chainTop = _c.chainTop, chainBottom = _c.chainBottom, hasSeparator = _c.hasSeparator;
                        var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);
                        return (React__default.createElement(MessageProvider, { message: m, key: m === null || m === void 0 ? void 0 : m.messageId, isByMe: isByMe },
                            React__default.createElement(Message, { handleScroll: moveScroll, renderMessage: renderMessage, message: m, hasSeparator: hasSeparator, chainTop: chainTop, chainBottom: chainBottom, renderCustomSeparator: renderCustomSeparator })));
                    }),
                    localMessages.map(function (m, idx) {
                        var _a, _b;
                        var _c = getMessagePartsInfo({
                            allMessages: allMessagesFiltered,
                            replyType: replyType,
                            isMessageGroupingEnabled: isMessageGroupingEnabled,
                            currentIndex: idx,
                            currentMessage: m,
                            currentChannel: currentGroupChannel,
                        }), chainTop = _c.chainTop, chainBottom = _c.chainBottom;
                        var isByMe = ((_a = m === null || m === void 0 ? void 0 : m.sender) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.userId);
                        return (React__default.createElement(MessageProvider, { message: m, key: m === null || m === void 0 ? void 0 : m.messageId, isByMe: isByMe },
                            React__default.createElement(Message, { handleScroll: moveScroll, renderMessage: renderMessage, message: m, chainTop: chainTop, chainBottom: chainBottom, renderCustomSeparator: renderCustomSeparator })));
                    }),
                    !hasMoreNext
                        && ((_c = (_b = store === null || store === void 0 ? void 0 : store.config) === null || _b === void 0 ? void 0 : _b.groupChannel) === null || _c === void 0 ? void 0 : _c.enableTypingIndicator)
                        && ((_f = (_e = (_d = store === null || store === void 0 ? void 0 : store.config) === null || _d === void 0 ? void 0 : _d.groupChannel) === null || _e === void 0 ? void 0 : _e.typingIndicatorTypes) === null || _f === void 0 ? void 0 : _f.has(TypingIndicatorType.Bubble))
                        && React__default.createElement(TypingIndicatorBubble, { typingMembers: typingMembers, handleScroll: moveScroll }))),
            (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && (renderFrozenNotification
                ? renderFrozenNotification()
                : React__default.createElement(FrozenNotification, { className: "sendbird-conversation__messages__notification" })),
            /**
             * Show unread count IFF scroll is not bottom or is bottom but hasNext is true.
             */
            (!isScrollBottom || hasMoreNext) && (unreadSince || unreadSinceDate) && (React__default.createElement(UnreadCount, { className: "sendbird-conversation__messages__notification", count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount, time: unreadSince, lastReadAt: unreadSinceDate, onClick: function () {
                    if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)
                        scrollRef.current.scrollTop = Number.MAX_SAFE_INTEGER;
                    if (!disableMarkAsRead && !!currentGroupChannel) {
                        markAsReadScheduler.push(currentGroupChannel);
                        messagesDispatcher({
                            type: messageActionTypes.MARK_AS_READ,
                            payload: { channel: currentGroupChannel },
                        });
                    }
                    setInitialTimeStamp(null);
                    setAnimatedMessageId(null);
                    setHighLightedMessageId(null);
                } })),
            // This flag is an unmatched variable
            scrollBottom > SCROLL_BOTTOM_PADDING && (React__default.createElement("div", { className: "sendbird-conversation__scroll-bottom-button", onClick: onClickScrollBot, onKeyDown: onClickScrollBot, tabIndex: 0, role: "button" },
                React__default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.PRIMARY }))))));
};

export { MessageList as M, TypingIndicatorType as T };
//# sourceMappingURL=bundle-wRCPXISN.js.map
