'use strict';

var _tslib = require('../../chunks/bundle-QH7iLrPR.js');
var React = require('react');
var index$2 = require('../../chunks/bundle-nGMCZjvM.js');
var Channel_components_SuggestedMentionList = require('./SuggestedMentionList.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var Channel_context = require('../../chunks/bundle-7gBYfQwU.js');
var index$1 = require('../../chunks/bundle-F--qTOLe.js');
var utils = require('../../chunks/bundle-pxBxPT0b.js');
var _const = require('../../chunks/bundle-o1ta9AIa.js');
var ui_DateSeparator = require('../../ui/DateSeparator.js');
var ui_Label = require('../../chunks/bundle-0MHADZvF.js');
var ui_MessageInput = require('../../ui/MessageInput.js');
var ui_MessageContent = require('../../ui/MessageContent.js');
var Channel_components_FileViewer = require('./FileViewer.js');
var Channel_components_RemoveMessageModal = require('./RemoveMessageModal.js');
var _const$1 = require('../../chunks/bundle-hxGMLtWg.js');
var LocalizationContext = require('../../chunks/bundle-ZurhBjw4.js');
var index = require('../../chunks/bundle-nuIgQkwQ.js');
var Message_hooks_useDirtyGetMentions = require('../../Message/hooks/useDirtyGetMentions.js');
require('../../chunks/bundle-cV7uGK08.js');
require('../../ui/Icon.js');
require('../../chunks/bundle-Pe-j2f1D.js');
require('../../chunks/bundle-vSdu8rrq.js');
require('../../ui/ImageRenderer.js');
require('../../chunks/bundle-NYFm08XH.js');
require('../../chunks/bundle-MeuNh9Q9.js');
require('../../Thread/context.js');
require('../../chunks/bundle-tFuTz5CT.js');
require('../../chunks/bundle-0wbO-LdY.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../chunks/bundle-gM8i5lGF.js');
require('../../Thread/context/types.js');
require('@sendbird/chat');
require('../../chunks/bundle-GE1I3PNS.js');
require('@sendbird/chat/groupChannel');
require('../../chunks/bundle-ow5FLcVV.js');
require('@sendbird/chat/message');
require('../../chunks/bundle-EVdeXpsD.js');
require('../../withSendbird.js');
require('../../chunks/bundle-AQhLE-Ci.js');
require('../hooks/useInitialMessagesFetch.js');
require('../../chunks/bundle-l92Ws-Rs.js');
require('../../chunks/bundle-yTYZiuXi.js');
require('../../chunks/bundle-v8bBiJ_c.js');
require('../../ui/IconButton.js');
require('../../ui/Button.js');
require('../../chunks/bundle-HjwY9t7s.js');
require('dompurify');
require('../../chunks/bundle-N1ipvkhN.js');
require('../../chunks/bundle-i5KLDxjz.js');
require('../../chunks/bundle-xeeBDhY6.js');
require('../../chunks/bundle-FpImAp7o.js');
require('../../chunks/bundle-0bOWh2mP.js');
require('../../ui/Loader.js');
require('../../chunks/bundle-YjWwnwWH.js');
require('../../chunks/bundle-AoaxviqO.js');
require('../../ui/MessageItemMenu.js');
require('../../ui/ContextMenu.js');
require('react-dom');
require('../../ui/SortByRow.js');
require('../../chunks/bundle-fWyUHuJu.js');
require('../../ui/MessageItemReactionMenu.js');
require('../../ui/ReactionButton.js');
require('../../chunks/bundle-5MVOBR4R.js');
require('../../chunks/bundle-vWUmeH2R.js');
require('../../ui/EmojiReactions.js');
require('../../ui/ReactionBadge.js');
require('../../ui/BottomSheet.js');
require('../../hooks/useModal.js');
require('../../chunks/bundle-JragPpHy.js');
require('../../ui/UserListItem.js');
require('../../ui/MutedAvatarOverlay.js');
require('../../ui/Checkbox.js');
require('../../ui/UserProfile.js');
require('../../sendbirdSelectors.js');
require('../../ui/Tooltip.js');
require('../../ui/TooltipWrapper.js');
require('../../Message/context.js');
require('../../ui/AdminMessage.js');
require('../../ui/QuoteMessage.js');
require('../../chunks/bundle-KKPmuuwX.js');
require('../../chunks/bundle-pVKke2mQ.js');
require('../../ui/ThreadReplies.js');
require('../../ui/OGMessageItemBody.js');
require('../../chunks/bundle-wN0CLPzM.js');
require('../../ui/MentionLabel.js');
require('../../ui/LinkLabel.js');
require('../../ui/TextMessageItemBody.js');
require('../../ui/FileMessageItemBody.js');
require('../../ui/TextButton.js');
require('../../chunks/bundle-omofvX-G.js');
require('../../chunks/bundle-5cuVj6Hi.js');
require('../../ui/VoiceMessageItemBody.js');
require('../../ui/ProgressBar.js');
require('../../VoicePlayer/useVoicePlayer.js');
require('../../chunks/bundle-VoZZnYtF.js');
require('../../VoiceRecorder/context.js');
require('../../ui/PlaybackTime.js');
require('../../ui/ThumbnailMessageItemBody.js');
require('../../ui/UnknownMessageItemBody.js');
require('../../chunks/bundle-HaufoaVC.js');

var useDidMountEffect = function (func, deps) {
    var _a = React.useState(false), didMount = _a[0], setDidmount = _a[1];
    React.useEffect(function () {
        if (didMount) {
            func();
        }
        else {
            setDidmount(true);
        }
    }, deps);
};

var SuggestedReplies = function (_a) {
    var replyOptions = _a.replyOptions, onSendMessage = _a.onSendMessage;
    var _b = React.useState(false), replied = _b[0], setReplied = _b[1];
    var onClickReply = function (event, option) {
        event.preventDefault();
        onSendMessage({ message: option });
        setReplied(true);
    };
    if (replied) {
        return null;
    }
    return (React.createElement("div", { className: "sendbird-suggested-replies" }, replyOptions.map(function (option, index) {
        return (React.createElement("div", { className: "sendbird-suggested-replies__option", id: option, key: index + option, onClick: function (e) { return onClickReply(e, option); } }, option));
    })));
};

// todo: Refactor this component, is too complex now
var Message = function (_a) {
    var _b, _c, _d;
    var message = _a.message, hasSeparator = _a.hasSeparator, chainTop = _a.chainTop, chainBottom = _a.chainBottom, handleScroll = _a.handleScroll, renderCustomSeparator = _a.renderCustomSeparator, renderEditInput = _a.renderEditInput, renderMessage = _a.renderMessage, renderMessageContent = _a.renderMessageContent;
    var _e = LocalizationContext.useLocalization(), dateLocale = _e.dateLocale, stringSet = _e.stringSet;
    var globalStore = useSendbirdStateContext.useSendbirdStateContext();
    var _f = globalStore.config, userId = _f.userId, isOnline = _f.isOnline, isMentionEnabled = _f.isMentionEnabled, userMention = _f.userMention, logger = _f.logger;
    var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || _const.MAX_USER_MENTION_COUNT;
    var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || _const.MAX_USER_SUGGESTION_COUNT;
    var _g = Channel_context.useChannelContext(), initialized = _g.initialized, currentGroupChannel = _g.currentGroupChannel, highLightedMessageId = _g.highLightedMessageId, setHighLightedMessageId = _g.setHighLightedMessageId, animatedMessageId = _g.animatedMessageId, setAnimatedMessageId = _g.setAnimatedMessageId, updateMessage = _g.updateMessage, scrollToMessage = _g.scrollToMessage, replyType = _g.replyType, threadReplySelectType = _g.threadReplySelectType, isReactionEnabled = _g.isReactionEnabled, toggleReaction = _g.toggleReaction, emojiContainer = _g.emojiContainer, nicknamesMap = _g.nicknamesMap, setQuoteMessage = _g.setQuoteMessage, resendMessage = _g.resendMessage, deleteMessage = _g.deleteMessage, renderUserMentionItem = _g.renderUserMentionItem, onReplyInThread = _g.onReplyInThread, onQuoteMessageClick = _g.onQuoteMessageClick, onMessageAnimated = _g.onMessageAnimated, onMessageHighlighted = _g.onMessageHighlighted, onScrollCallback = _g.onScrollCallback, setIsScrolled = _g.setIsScrolled, sendMessage = _g.sendMessage, localMessages = _g.localMessages;
    var _h = React.useState(false), showEdit = _h[0], setShowEdit = _h[1];
    var _j = React.useState(false), showRemove = _j[0], setShowRemove = _j[1];
    var _k = React.useState(false), showFileViewer = _k[0], setShowFileViewer = _k[1];
    var _l = React.useState(false), isAnimated = _l[0], setIsAnimated = _l[1];
    var _m = React.useState(false), isHighlighted = _m[0], setIsHighlighted = _m[1];
    var _o = React.useState(''), mentionNickname = _o[0], setMentionNickname = _o[1];
    var _p = React.useState([]), mentionedUsers = _p[0], setMentionedUsers = _p[1];
    var _q = React.useState([]), mentionedUserIds = _q[0], setMentionedUserIds = _q[1];
    var _r = React.useState(null), messageInputEvent = _r[0], setMessageInputEvent = _r[1];
    var _s = React.useState(null), selectedUser = _s[0], setSelectedUser = _s[1];
    var _t = React.useState([]), mentionSuggestedUsers = _t[0], setMentionSuggestedUsers = _t[1];
    var editMessageInputRef = React.useRef(null);
    var messageScrollRef = React.useRef(null);
    var displaySuggestedMentionList = isOnline
        && isMentionEnabled
        && mentionNickname.length > 0
        && !utils.isDisabledBecauseFrozen(currentGroupChannel)
        && !utils.isDisabledBecauseMuted(currentGroupChannel);
    var disabled = !initialized
        || utils.isDisabledBecauseFrozen(currentGroupChannel)
        || utils.isDisabledBecauseMuted(currentGroupChannel)
        || !isOnline;
    var handleOnScroll = index.useHandleOnScrollCallback({
        hasMore: false,
        onScroll: onScrollCallback,
        scrollRef: messageScrollRef,
        setIsScrolled: setIsScrolled,
    });
    var mentionNodes = Message_hooks_useDirtyGetMentions.useDirtyGetMentions({ ref: editMessageInputRef }, { logger: logger });
    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
    React.useEffect(function () {
        setMentionedUsers(mentionedUsers.filter(function (_a) {
            var userId = _a.userId;
            var i = mentionedUserIds.indexOf(userId);
            if (i < 0) {
                return false;
            }
            else {
                mentionedUserIds.splice(i, 1);
                return true;
            }
        }));
    }, [mentionedUserIds]);
    React.useLayoutEffect(function () {
        // Keep the scrollBottom value after fetching new message list
        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
    }, []);
    /**
     * Move the messsage list scroll
     * when the message's height is changed by `showEdit` OR `message.reactions`
     */
    useDidMountEffect(function () {
        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
    }, [showEdit, (_b = message === null || message === void 0 ? void 0 : message.reactions) === null || _b === void 0 ? void 0 : _b.length]);
    useDidMountEffect(function () {
        handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
    }, [message === null || message === void 0 ? void 0 : message.updatedAt]);
    React.useLayoutEffect(function () {
        var animationTimeout = null;
        var messageHighlightedTimeout = null;
        if (highLightedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
            handleOnScroll();
            setIsAnimated(false);
            animationTimeout = setTimeout(function () {
                setIsHighlighted(true);
            }, 500);
            messageHighlightedTimeout = setTimeout(function () {
                setHighLightedMessageId(0);
                onMessageHighlighted === null || onMessageHighlighted === void 0 ? void 0 : onMessageHighlighted();
            }, 1600);
        }
        else {
            setIsHighlighted(false);
        }
        return function () {
            clearTimeout(animationTimeout);
            clearTimeout(messageHighlightedTimeout);
        };
    }, [highLightedMessageId, messageScrollRef.current, message.messageId]);
    React.useLayoutEffect(function () {
        var animationTimeout = null;
        var messageAnimatedTimeout = null;
        if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
            handleOnScroll();
            setIsHighlighted(false);
            animationTimeout = setTimeout(function () {
                setIsAnimated(true);
            }, 500);
            messageAnimatedTimeout = setTimeout(function () {
                setAnimatedMessageId(0);
                onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();
            }, 1600);
        }
        else {
            setIsAnimated(false);
        }
        return function () {
            clearTimeout(animationTimeout);
            clearTimeout(messageAnimatedTimeout);
        };
    }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);
    var renderedMessage = React.useMemo(function () {
        return renderMessage === null || renderMessage === void 0 ? void 0 : renderMessage({
            message: message,
            chainTop: chainTop,
            chainBottom: chainBottom,
        });
    }, [message, renderMessage]);
    var renderedCustomSeparator = React.useMemo(function () {
        if (renderCustomSeparator) {
            return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message: message });
        }
        return null;
    }, [message, renderCustomSeparator]);
    if (renderedMessage) {
        return (React.createElement("div", { "data-sb-message-id": message.messageId, "data-sb-created-at": message.createdAt, ref: messageScrollRef, className: index$1.getClassName([
                'sendbird-msg-hoc sendbird-msg--scroll-ref',
                isAnimated ? 'sendbird-msg-hoc__animated' : '',
                isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',
            ]) },
            // TODO: Add message instance as a function parameter
            hasSeparator && (renderedCustomSeparator || (React.createElement(ui_DateSeparator, null,
                React.createElement(ui_Label.Label, { type: ui_Label.LabelTypography.CAPTION_2, color: ui_Label.LabelColors.ONBACKGROUND_2 }, index$2.format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {
                    locale: dateLocale,
                }))))),
            renderedMessage));
    }
    if (showEdit && ((_c = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _c === void 0 ? void 0 : _c.call(message))) {
        return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || (React.createElement(React.Fragment, null,
            displaySuggestedMentionList && (React.createElement(Channel_components_SuggestedMentionList, { targetNickname: mentionNickname, inputEvent: messageInputEvent, renderUserMentionItem: renderUserMentionItem, onUserItemClick: function (user) {
                    if (user) {
                        setMentionedUsers(_tslib.__spreadArray(_tslib.__spreadArray([], mentionedUsers, true), [user], false));
                    }
                    setMentionNickname('');
                    setSelectedUser(user);
                    setMessageInputEvent(null);
                }, onFocusItemChange: function () {
                    setMessageInputEvent(null);
                }, onFetchUsers: function (users) {
                    setMentionSuggestedUsers(users);
                }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount })),
            React.createElement(ui_MessageInput, { isEdit: true, channel: currentGroupChannel, disabled: disabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, message: message, onStartTyping: function () {
                    var _a;
                    (_a = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.startTyping) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);
                }, onUpdateMessage: function (_a) {
                    var _b;
                    var messageId = _a.messageId, message = _a.message, mentionTemplate = _a.mentionTemplate;
                    updateMessage({
                        messageId: messageId,
                        message: message,
                        mentionedUsers: mentionedUsers,
                        mentionTemplate: mentionTemplate,
                    });
                    setShowEdit(false);
                    (_b = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _b === void 0 ? void 0 : _b.call(currentGroupChannel);
                }, onCancelEdit: function () {
                    var _a;
                    setMentionNickname('');
                    setMentionedUsers([]);
                    setMentionedUserIds([]);
                    setMentionSuggestedUsers([]);
                    setShowEdit(false);
                    (_a = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.endTyping) === null || _a === void 0 ? void 0 : _a.call(currentGroupChannel);
                }, onUserMentioned: function (user) {
                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
                        setSelectedUser(null);
                        setMentionNickname('');
                    }
                }, onMentionStringChange: function (mentionText) {
                    setMentionNickname(mentionText);
                }, onMentionedUserIdsUpdated: function (userIds) {
                    setMentionedUserIds(userIds);
                }, onKeyDown: function (e) {
                    if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0
                        && ((e.key === _const$1.MessageInputKeys.Enter && ableMention) || e.key === _const$1.MessageInputKeys.ArrowUp || e.key === _const$1.MessageInputKeys.ArrowDown)) {
                        setMessageInputEvent(e);
                        return true;
                    }
                    return false;
                } })));
    }
    return (React.createElement("div", { className: index$1.getClassName([
            'sendbird-msg-hoc sendbird-msg--scroll-ref',
            isAnimated ? 'sendbird-msg-hoc__animated' : '',
            isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',
        ]), style: { marginBottom: '2px' }, "data-sb-message-id": message.messageId, "data-sb-created-at": message.createdAt, ref: messageScrollRef },
        hasSeparator && (renderedCustomSeparator || (React.createElement(ui_DateSeparator, null,
            React.createElement(ui_Label.Label, { type: ui_Label.LabelTypography.CAPTION_2, color: ui_Label.LabelColors.ONBACKGROUND_2 }, index$2.format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {
                locale: dateLocale,
            }))))),
        (renderMessageContent === null || renderMessageContent === void 0 ? void 0 : renderMessageContent()) || (React.createElement(ui_MessageContent, { className: "sendbird-message-hoc__message-content", userId: userId, scrollToMessage: scrollToMessage, channel: currentGroupChannel, message: message, disabled: !isOnline, chainTop: chainTop, chainBottom: chainBottom, isReactionEnabled: isReactionEnabled, replyType: replyType, threadReplySelectType: threadReplySelectType, nicknamesMap: nicknamesMap, emojiContainer: emojiContainer, showEdit: setShowEdit, showRemove: setShowRemove, showFileViewer: setShowFileViewer, resendMessage: resendMessage, deleteMessage: deleteMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onReplyInThread: onReplyInThread, onQuoteMessageClick: onQuoteMessageClick, onMessageHeightChange: handleScroll })),
        message.messageId === ((_d = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.lastMessage) === null || _d === void 0 ? void 0 : _d.messageId)
            // the options should appear only when there's no failed or pending messages
            && localMessages.every(function (message) { return message.sendingStatus === 'succeeded'; })
            && index$1.getSuggestedReplies(message).length > 0 && (React.createElement(SuggestedReplies, { replyOptions: index$1.getSuggestedReplies(message), onSendMessage: sendMessage })),
        showRemove && (React.createElement(Channel_components_RemoveMessageModal, { message: message, onCancel: function () { return setShowRemove(false); } })),
        showFileViewer && (React.createElement(Channel_components_FileViewer.default, { message: message, onCancel: function () { return setShowFileViewer(false); } }))));
};

module.exports = Message;
//# sourceMappingURL=Message.js.map
