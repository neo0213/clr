'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../chunks/bundle-QH7iLrPR.js');
var React = require('react');
var utils = require('../../chunks/bundle-pxBxPT0b.js');
var ui_MessageInput = require('../../ui/MessageInput.js');
var ui_QuoteMessageInput = require('../../ui/QuoteMessageInput.js');
var LocalizationContext = require('../../chunks/bundle-ZurhBjw4.js');
var Channel_context = require('../../chunks/bundle-7gBYfQwU.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var Channel_components_SuggestedMentionList = require('./SuggestedMentionList.js');
var _const = require('../../chunks/bundle-hxGMLtWg.js');
var VoiceMessageInputWrapper = require('../../chunks/bundle-x3a8KQ02.js');
var Message_hooks_useDirtyGetMentions = require('../../Message/hooks/useDirtyGetMentions.js');
var MediaQueryContext = require('../../chunks/bundle-vWUmeH2R.js');
var Channel_hooks_useHandleUploadFiles = require('../hooks/useHandleUploadFiles.js');
require('../../chunks/bundle-nGMCZjvM.js');
require('../../chunks/bundle-cV7uGK08.js');
require('../../chunks/bundle-F--qTOLe.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../chunks/bundle-AQhLE-Ci.js');
require('@sendbird/chat/message');
require('../../chunks/bundle-o1ta9AIa.js');
require('../../ui/IconButton.js');
require('../../ui/Button.js');
require('../../chunks/bundle-0MHADZvF.js');
require('../../chunks/bundle-v8bBiJ_c.js');
require('../../chunks/bundle-HjwY9t7s.js');
require('dompurify');
require('../../chunks/bundle-N1ipvkhN.js');
require('../../chunks/bundle-i5KLDxjz.js');
require('../../chunks/bundle-xeeBDhY6.js');
require('../../ui/Icon.js');
require('../../chunks/bundle-Pe-j2f1D.js');
require('../../chunks/bundle-FpImAp7o.js');
require('../../ui/ImageRenderer.js');
require('../../chunks/bundle-KKPmuuwX.js');
require('../../chunks/bundle-gM8i5lGF.js');
require('../../chunks/bundle-GE1I3PNS.js');
require('../../chunks/bundle-ow5FLcVV.js');
require('@sendbird/chat/groupChannel');
require('../../chunks/bundle-NYFm08XH.js');
require('../hooks/useInitialMessagesFetch.js');
require('../../chunks/bundle-0wbO-LdY.js');
require('../../chunks/bundle-EVdeXpsD.js');
require('../../chunks/bundle-l92Ws-Rs.js');
require('../../chunks/bundle-tFuTz5CT.js');
require('../../withSendbird.js');
require('../../chunks/bundle-vSdu8rrq.js');
require('../../chunks/bundle-MeuNh9Q9.js');
require('../../Thread/context.js');
require('../../Thread/context/types.js');
require('@sendbird/chat');
require('../../VoicePlayer/useVoicePlayer.js');
require('../../chunks/bundle-VoZZnYtF.js');
require('../../VoiceRecorder/context.js');
require('../../chunks/bundle-JragPpHy.js');
require('react-dom');
require('../../VoiceRecorder/useVoiceRecorder.js');
require('../../chunks/bundle-IxIg8fhp.js');
require('../../ui/PlaybackTime.js');
require('../../ui/ProgressBar.js');
require('../../ui/TextButton.js');
require('../../chunks/bundle-yTYZiuXi.js');
require('../../hooks/useModal.js');

var MessageInputWrapper = function (props, ref) {
    var _a;
    var value = props.value, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon;
    var propDisabled = props.disabled;
    var channelContext = Channel_context.useChannelContext();
    var currentGroupChannel = channelContext.currentGroupChannel, initialized = channelContext.initialized, quoteMessage = channelContext.quoteMessage, sendMessage = channelContext.sendMessage, sendFileMessage = channelContext.sendFileMessage, sendVoiceMessage = channelContext.sendVoiceMessage, sendMultipleFilesMessage = channelContext.sendMultipleFilesMessage, setQuoteMessage = channelContext.setQuoteMessage, messageInputRef = channelContext.messageInputRef, renderUserMentionItem = channelContext.renderUserMentionItem;
    var globalStore = useSendbirdStateContext.useSendbirdStateContext();
    var isMobile = MediaQueryContext.useMediaQueryContext().isMobile;
    var channel = currentGroupChannel;
    var _b = globalStore.config, isOnline = _b.isOnline, isMentionEnabled = _b.isMentionEnabled, userMention = _b.userMention, isVoiceMessageEnabled = _b.isVoiceMessageEnabled, logger = _b.logger;
    var isMultipleFilesMessageEnabled = ((_a = channelContext.isMultipleFilesMessageEnabled) !== null && _a !== void 0 ? _a : globalStore.config.isMultipleFilesMessageEnabled);
    var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10;
    var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15;
    var stringSet = React.useContext(LocalizationContext.LocalizationContext).stringSet;
    var _c = React.useState(''), mentionNickname = _c[0], setMentionNickname = _c[1];
    // todo: set type
    var _d = React.useState([]), mentionedUsers = _d[0], setMentionedUsers = _d[1];
    var _e = React.useState([]), mentionedUserIds = _e[0], setMentionedUserIds = _e[1];
    var _f = React.useState(null), selectedUser = _f[0], setSelectedUser = _f[1];
    var _g = React.useState([]), mentionSuggestedUsers = _g[0], setMentionSuggestedUsers = _g[1];
    var _h = React.useState(null), messageInputEvent = _h[0], setMessageInputEvent = _h[1];
    var _j = React.useState(false), showVoiceMessageInput = _j[0], setShowVoiceMessageInput = _j[1];
    var disabled = propDisabled
        || !initialized
        || utils.isDisabledBecauseFrozen(channel)
        || utils.isDisabledBecauseMuted(channel)
        || !isOnline;
    var isOperator = utils.isOperator(channel);
    var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
    var displaySuggestedMentionList = isOnline
        && isMentionEnabled
        && mentionNickname.length > 0
        && !utils.isDisabledBecauseFrozen(channel)
        && !utils.isDisabledBecauseMuted(channel)
        && !isBroadcast;
    // Reset when channel changes
    React.useEffect(function () {
        setMentionNickname('');
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setSelectedUser(null);
        setMentionSuggestedUsers([]);
        setMessageInputEvent(null);
        setShowVoiceMessageInput(false);
    }, [channel === null || channel === void 0 ? void 0 : channel.url]);
    var mentionNodes = Message_hooks_useDirtyGetMentions.useDirtyGetMentions({ ref: ref || messageInputRef }, { logger: logger });
    var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
    React.useEffect(function () {
        setMentionedUsers(mentionedUsers.filter(function (_a) {
            var userId = _a.userId;
            var i = mentionedUserIds.indexOf(userId);
            if (i < 0) {
                return false;
            }
            else {
                mentionedUserIds.splice(i, 1);
                return true;
            }
        }));
    }, [mentionedUserIds]);
    // MFM
    var handleUploadFiles = Channel_hooks_useHandleUploadFiles.useHandleUploadFiles({
        sendFileMessage: sendFileMessage,
        sendMultipleFilesMessage: sendMultipleFilesMessage,
        quoteMessage: quoteMessage,
    }, {
        logger: logger,
    });
    // broadcast channel + not operator
    if (isBroadcast && !isOperator) {
        return null;
    }
    // other conditions
    return (React.createElement("div", { className: "sendbird-message-input-wrapper".concat(showVoiceMessageInput ? '--voice-message' : '') },
        displaySuggestedMentionList && (React.createElement(Channel_components_SuggestedMentionList, { targetNickname: mentionNickname, inputEvent: messageInputEvent, renderUserMentionItem: renderUserMentionItem, onUserItemClick: function (user) {
                if (user) {
                    setMentionedUsers(_tslib.__spreadArray(_tslib.__spreadArray([], mentionedUsers, true), [user], false));
                }
                setMentionNickname('');
                setSelectedUser(user);
                setMessageInputEvent(null);
            }, onFocusItemChange: function () {
                setMessageInputEvent(null);
            }, onFetchUsers: function (users) {
                setMentionSuggestedUsers(users);
            }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount })),
        quoteMessage && (React.createElement("div", { className: "sendbird-message-input-wrapper__quote-message-input" },
            React.createElement(ui_QuoteMessageInput, { replyingMessage: quoteMessage, onClose: function () { return setQuoteMessage(null); } }))),
        showVoiceMessageInput
            ? (React.createElement(VoiceMessageInputWrapper.VoiceMessageInputWrapper, { channel: channel, onSubmitClick: function (recordedFile, duration) {
                    sendVoiceMessage(recordedFile, duration, quoteMessage);
                    setQuoteMessage(null);
                    setShowVoiceMessageInput(false);
                }, onCancelClick: function () {
                    setShowVoiceMessageInput(false);
                } }))
            : (React.createElement(ui_MessageInput, { className: "sendbird-message-input-wrapper__message-input", value: value, channelUrl: channel === null || channel === void 0 ? void 0 : channel.url, mentionSelectedUser: selectedUser, isMentionEnabled: isMentionEnabled, isVoiceMessageEnabled: isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function () {
                    setShowVoiceMessageInput(true);
                }, setMentionedUsers: setMentionedUsers, channel: channel, placeholder: (quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER)
                    || (utils.isDisabledBecauseFrozen(channel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED)
                    || (utils.isDisabledBecauseMuted(channel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED)), ref: ref || messageInputRef, disabled: disabled, renderFileUploadIcon: renderFileUploadIcon, renderSendMessageIcon: renderSendMessageIcon, renderVoiceMessageIcon: renderVoiceMessageIcon, onStartTyping: function () {
                    channel === null || channel === void 0 ? void 0 : channel.startTyping();
                }, onSendMessage: function (_a) {
                    var _b;
                    var message = _a.message, mentionTemplate = _a.mentionTemplate;
                    sendMessage({
                        message: message,
                        quoteMessage: quoteMessage,
                        mentionedUsers: mentionedUsers,
                        mentionTemplate: mentionTemplate,
                    });
                    setMentionNickname('');
                    setMentionedUsers([]);
                    setQuoteMessage(null);
                    (_b = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b === void 0 ? void 0 : _b.call(channel);
                }, onFileUpload: function (fileList) {
                    handleUploadFiles(fileList);
                    setQuoteMessage(null);
                }, onUserMentioned: function (user) {
                    if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
                        setSelectedUser(null);
                        setMentionNickname('');
                    }
                }, onMentionStringChange: function (mentionText) {
                    setMentionNickname(mentionText);
                }, onMentionedUserIdsUpdated: function (userIds) {
                    setMentionedUserIds(userIds);
                }, onKeyDown: function (e) {
                    if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0
                        && ((e.key === _const.MessageInputKeys.Enter && ableMention) || e.key === _const.MessageInputKeys.ArrowUp || e.key === _const.MessageInputKeys.ArrowDown)) {
                        setMessageInputEvent(e);
                        return true;
                    }
                    return false;
                } }))));
};
var MessageInputWrapper$1 = React.forwardRef(MessageInputWrapper);

exports.VoiceMessageInputWrapper = VoiceMessageInputWrapper.VoiceMessageInputWrapper;
exports.default = MessageInputWrapper$1;
//# sourceMappingURL=MessageInput.js.map
