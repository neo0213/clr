'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var groupChannel = require('@sendbird/chat/groupChannel');
var LocalizationContext = require('../../chunks/bundle-ZurhBjw4.js');
var uuid = require('../../chunks/bundle-NYFm08XH.js');
var ui_Label = require('../../chunks/bundle-0MHADZvF.js');
var Channel_context = require('../../chunks/bundle-7gBYfQwU.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
require('../../chunks/bundle-v8bBiJ_c.js');
require('../../chunks/bundle-cV7uGK08.js');
require('../../chunks/bundle-QH7iLrPR.js');
require('../../chunks/bundle-gM8i5lGF.js');
require('../../chunks/bundle-o1ta9AIa.js');
require('../../chunks/bundle-pxBxPT0b.js');
require('../../chunks/bundle-nGMCZjvM.js');
require('../../chunks/bundle-F--qTOLe.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../chunks/bundle-AQhLE-Ci.js');
require('@sendbird/chat/message');
require('../../chunks/bundle-GE1I3PNS.js');
require('../../chunks/bundle-ow5FLcVV.js');
require('../hooks/useInitialMessagesFetch.js');
require('../../chunks/bundle-0wbO-LdY.js');
require('../../chunks/bundle-EVdeXpsD.js');
require('../../chunks/bundle-l92Ws-Rs.js');
require('../../chunks/bundle-tFuTz5CT.js');
require('../../withSendbird.js');

var TypingIndicatorText = function (_a) {
    var members = _a.members;
    function getText() {
        var stringSet = React.useContext(LocalizationContext.LocalizationContext).stringSet;
        if (!members || members.length === 0) {
            return '';
        }
        if (members && members.length === 1) {
            return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__IS_TYPING);
        }
        if (members && members.length === 2) {
            return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__AND, " ").concat(members[1].nickname, " ").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);
        }
        return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;
    }
    return React.createElement(React.Fragment, null, getText());
};
var TypingIndicator = function () {
    var _a, _b, _c;
    var channelUrl = Channel_context.useChannelContext().channelUrl;
    var globalStore = useSendbirdStateContext.useSendbirdStateContext();
    var sb = (_b = (_a = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _a === void 0 ? void 0 : _a.sdkStore) === null || _b === void 0 ? void 0 : _b.sdk;
    var logger = (_c = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config) === null || _c === void 0 ? void 0 : _c.logger;
    var _d = React.useState(uuid.uuidv4()), handlerId = _d[0], setHandlerId = _d[1];
    var _e = React.useState([]), typingMembers = _e[0], setTypingMembers = _e[1];
    React.useEffect(function () {
        var _a;
        if ((_a = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a === void 0 ? void 0 : _a.addGroupChannelHandler) {
            sb.groupChannel.removeGroupChannelHandler(handlerId);
            var newHandlerId = uuid.uuidv4();
            var handler = new groupChannel.GroupChannelHandler({
                onTypingStatusUpdated: function (groupChannel) {
                    // there is a possible warning in here - setState called after unmount
                    logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);
                    if (groupChannel.url === channelUrl) {
                        var members = groupChannel.getTypingUsers();
                        setTypingMembers(members);
                    }
                },
            });
            sb.groupChannel.addGroupChannelHandler(newHandlerId, handler);
            setHandlerId(newHandlerId);
        }
        return function () {
            var _a;
            setTypingMembers([]);
            if ((_a = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a === void 0 ? void 0 : _a.removeGroupChannelHandler) {
                sb.groupChannel.removeGroupChannelHandler(handlerId);
            }
        };
    }, [channelUrl]);
    return (React.createElement(ui_Label.Label, { className: "sendbird-conversation__footer__typing-indicator__text", type: ui_Label.LabelTypography.CAPTION_2, color: ui_Label.LabelColors.ONBACKGROUND_2 },
        React.createElement(TypingIndicatorText, { members: typingMembers })));
};

exports.TypingIndicatorText = TypingIndicatorText;
exports.default = TypingIndicator;
//# sourceMappingURL=TypingIndicator.js.map
