'use strict';

var React = require('react');
var ChannelList_components_ChannelListHeader = require('./ChannelListHeader.js');
var ChannelList_components_AddChannel = require('./AddChannel.js');
var ChannelList_components_ChannelPreview = require('./ChannelPreview.js');
var ChannelList_components_ChannelPreviewAction = require('./ChannelPreviewAction.js');
var ChannelList_context = require('../../chunks/bundle-FV9lCJz1.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var EditUserProfile = require('../../EditUserProfile.js');
var ui_PlaceHolder = require('../../ui/PlaceHolder.js');
var utils = require('../../chunks/bundle-Pe-j2f1D.js');
require('../../chunks/bundle-ZurhBjw4.js');
require('../../chunks/bundle-v8bBiJ_c.js');
require('../../chunks/bundle-cV7uGK08.js');
require('../../chunks/bundle-0MHADZvF.js');
require('../../chunks/bundle-QH7iLrPR.js');
require('../../chunks/bundle-vSdu8rrq.js');
require('../../ui/ImageRenderer.js');
require('../../chunks/bundle-NYFm08XH.js');
require('../../chunks/bundle-MeuNh9Q9.js');
require('../../ui/Icon.js');
require('../../ui/IconButton.js');
require('../../CreateChannel.js');
require('../../CreateChannel/components/CreateChannelUI.js');
require('../../chunks/bundle-igY82TbB.js');
require('../../sendbirdSelectors.js');
require('../../chunks/bundle-0wbO-LdY.js');
require('../../CreateChannel/components/InviteUsers.js');
require('../../chunks/bundle-JragPpHy.js');
require('react-dom');
require('../../chunks/bundle-vWUmeH2R.js');
require('../../ui/Button.js');
require('../../ui/UserListItem.js');
require('../../chunks/bundle-gM8i5lGF.js');
require('../../ui/MutedAvatarOverlay.js');
require('../../ui/Checkbox.js');
require('../../ui/UserProfile.js');
require('../../ui/ContextMenu.js');
require('../../ui/SortByRow.js');
require('../../chunks/bundle-F--qTOLe.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../chunks/bundle-AQhLE-Ci.js');
require('../../CreateChannel/components/SelectChannelType.js');
require('../../ui/ChannelAvatar.js');
require('../../chunks/bundle-A4ywDIVT.js');
require('../../ui/Badge.js');
require('../../chunks/bundle-0bOWh2mP.js');
require('../../chunks/bundle-nGMCZjvM.js');
require('../../ui/Loader.js');
require('../../chunks/bundle-YjWwnwWH.js');
require('../../chunks/bundle-AoaxviqO.js');
require('../../ui/MentionUserLabel.js');
require('../../chunks/bundle-N1ipvkhN.js');
require('../../ui/TextButton.js');
require('../../chunks/bundle-yTYZiuXi.js');
require('../../Channel/components/TypingIndicator.js');
require('@sendbird/chat/groupChannel');
require('../../chunks/bundle-7gBYfQwU.js');
require('../../chunks/bundle-o1ta9AIa.js');
require('../../chunks/bundle-pxBxPT0b.js');
require('@sendbird/chat/message');
require('../../chunks/bundle-GE1I3PNS.js');
require('../../chunks/bundle-ow5FLcVV.js');
require('../../Channel/hooks/useInitialMessagesFetch.js');
require('../../chunks/bundle-EVdeXpsD.js');
require('../../chunks/bundle-l92Ws-Rs.js');
require('../../chunks/bundle-tFuTz5CT.js');
require('../../chunks/bundle-5MVOBR4R.js');
require('../../withSendbird.js');
require('../../EditUserProfile/context.js');
require('../../EditUserProfile/components/EditUserProfileUI.js');
require('../../ui/Input.js');
require('../../chunks/bundle-vWlSj3_G.js');

var ChannelListUI = function (props) {
    var _a;
    var renderHeader = props.renderHeader, renderChannelPreview = props.renderChannelPreview, renderPlaceHolderError = props.renderPlaceHolderError, renderPlaceHolderLoading = props.renderPlaceHolderLoading, renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;
    var _b = React.useState(false), showProfileEdit = _b[0], setShowProfileEdit = _b[1];
    var _c = ChannelList_context.useChannelListContext(), onThemeChange = _c.onThemeChange, allowProfileEdit = _c.allowProfileEdit, allChannels = _c.allChannels, loading = _c.loading, currentChannel = _c.currentChannel, channelListDispatcher = _c.channelListDispatcher, typingChannels = _c.typingChannels, initialized = _c.initialized, fetchChannelList = _c.fetchChannelList, onProfileEditSuccess = _c.onProfileEditSuccess;
    var state = useSendbirdStateContext.useSendbirdStateContext();
    var sdkStore = (_a = state === null || state === void 0 ? void 0 : state.stores) === null || _a === void 0 ? void 0 : _a.sdkStore;
    var config = state === null || state === void 0 ? void 0 : state.config;
    var logger = config.logger, _d = config.isOnline, isOnline = _d === void 0 ? false : _d;
    var sdkError = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.error;
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "sendbird-channel-list__header" }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || (React.createElement(ChannelList_components_ChannelListHeader, { onEdit: function () {
                if (allowProfileEdit) {
                    setShowProfileEdit(true);
                }
            }, allowProfileEdit: allowProfileEdit, renderIconButton: function () { return (React.createElement(ChannelList_components_AddChannel.AddChannel, null)); } }))),
        showProfileEdit && (React.createElement(EditUserProfile, { onThemeChange: onThemeChange, onCancel: function () { setShowProfileEdit(false); }, onEditProfile: function (user) {
                setShowProfileEdit(false);
                onProfileEditSuccess(user);
            } })),
        React.createElement("div", { className: "sendbird-channel-list__body", onScroll: function (e) {
                var target = e === null || e === void 0 ? void 0 : e.target;
                if (utils.isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10)) {
                    fetchChannelList();
                }
            } },
            (sdkError && !loading) && ((renderPlaceHolderError && typeof renderPlaceHolderError === 'function') ? (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) : (React.createElement(ui_PlaceHolder.default, { type: ui_PlaceHolder.PlaceHolderTypes.WRONG }))),
            React.createElement("div", null, allChannels && allChannels.map(function (channel, idx) {
                // todo: Refactor and move this inside channel - preview
                var onLeaveChannel = function (c, cb) {
                    logger.info('ChannelList: Leaving channel', c);
                    c.leave()
                        .then(function (res) {
                        logger.info('ChannelList: Leaving channel success', res);
                        if (cb && typeof cb === 'function') {
                            cb(res, null);
                        }
                        channelListDispatcher({
                            type: ChannelList_context.LEAVE_CHANNEL_SUCCESS,
                            payload: channel === null || channel === void 0 ? void 0 : channel.url,
                        });
                    })
                        .catch(function (err) {
                        logger.error('ChannelList: Leaving channel failed', err);
                        if (cb && typeof cb === 'function') {
                            cb(null, err);
                        }
                    });
                };
                var onClick = function () {
                    if (!isOnline) {
                        return;
                    }
                    logger.info('ChannelList: Clicked on channel:', channel);
                    channelListDispatcher({
                        type: ChannelList_context.SET_CURRENT_CHANNEL,
                        payload: channel,
                    });
                };
                return ((renderChannelPreview)
                    ? (
                    // eslint-disable-next-line
                    React.createElement("div", { key: channel === null || channel === void 0 ? void 0 : channel.url, onClick: onClick }, renderChannelPreview({ channel: channel, onLeaveChannel: onLeaveChannel })))
                    : (React.createElement(ChannelList_components_ChannelPreview, { key: channel === null || channel === void 0 ? void 0 : channel.url, tabIndex: idx, onClick: onClick, channel: channel, onLeaveChannel: function () { return onLeaveChannel(channel, null); }, isActive: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url), isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function (_a) {
                            var url = _a.url;
                            return url === (channel === null || channel === void 0 ? void 0 : channel.url);
                        }), renderChannelAction: (function () { return (React.createElement(ChannelList_components_ChannelPreviewAction, { channel: channel, disabled: !isOnline, onLeaveChannel: function () { return onLeaveChannel(channel, null); } })); }) })));
            })),
            (!initialized && loading) && ((renderPlaceHolderLoading && typeof renderPlaceHolderLoading === 'function') ? (renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading()) : (React.createElement(ui_PlaceHolder.default, { type: ui_PlaceHolder.PlaceHolderTypes.LOADING }))),
            (initialized && (allChannels === null || allChannels === void 0 ? void 0 : allChannels.length) === 0) && ((renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === 'function') ? (renderPlaceHolderEmptyList === null || renderPlaceHolderEmptyList === void 0 ? void 0 : renderPlaceHolderEmptyList()) : (React.createElement(ui_PlaceHolder.default, { type: ui_PlaceHolder.PlaceHolderTypes.NO_CHANNELS }))))));
};

module.exports = ChannelListUI;
//# sourceMappingURL=ChannelListUI.js.map
