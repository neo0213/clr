'use strict';

var _tslib = require('../../chunks/bundle-QH7iLrPR.js');
var React = require('react');
var ui_ChannelAvatar = require('../../ui/ChannelAvatar.js');
var ui_Badge = require('../../ui/Badge.js');
var ui_Icon = require('../../ui/Icon.js');
var ui_Label = require('../../chunks/bundle-0MHADZvF.js');
var ui_MessageStatus = require('../../chunks/bundle-0bOWh2mP.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var LocalizationContext = require('../../chunks/bundle-ZurhBjw4.js');
var ui_MentionUserLabel = require('../../ui/MentionUserLabel.js');
var ui_Modal = require('../../chunks/bundle-JragPpHy.js');
var ui_TextButton = require('../../ui/TextButton.js');
var ChannelList_context = require('../../chunks/bundle-FV9lCJz1.js');
var Channel_components_TypingIndicator = require('../../Channel/components/TypingIndicator.js');
var index = require('../../chunks/bundle-F--qTOLe.js');
var MediaQueryContext = require('../../chunks/bundle-vWUmeH2R.js');
var useLongPress = require('../../chunks/bundle-5MVOBR4R.js');
require('../../chunks/bundle-vSdu8rrq.js');
require('../../ui/ImageRenderer.js');
require('../../chunks/bundle-NYFm08XH.js');
require('../../chunks/bundle-MeuNh9Q9.js');
require('../../chunks/bundle-A4ywDIVT.js');
require('../../chunks/bundle-Pe-j2f1D.js');
require('../../chunks/bundle-v8bBiJ_c.js');
require('../../chunks/bundle-nGMCZjvM.js');
require('../../chunks/bundle-cV7uGK08.js');
require('../../ui/Loader.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../chunks/bundle-YjWwnwWH.js');
require('../../chunks/bundle-AoaxviqO.js');
require('../../withSendbird.js');
require('../../chunks/bundle-N1ipvkhN.js');
require('react-dom');
require('../../ui/IconButton.js');
require('../../ui/Button.js');
require('../../chunks/bundle-yTYZiuXi.js');
require('@sendbird/chat/groupChannel');
require('../../chunks/bundle-0wbO-LdY.js');
require('../../chunks/bundle-EVdeXpsD.js');
require('../../chunks/bundle-gM8i5lGF.js');
require('../../chunks/bundle-AQhLE-Ci.js');
require('../../chunks/bundle-7gBYfQwU.js');
require('../../chunks/bundle-o1ta9AIa.js');
require('../../chunks/bundle-pxBxPT0b.js');
require('@sendbird/chat/message');
require('../../chunks/bundle-GE1I3PNS.js');
require('../../chunks/bundle-ow5FLcVV.js');
require('../../Channel/hooks/useInitialMessagesFetch.js');
require('../../chunks/bundle-l92Ws-Rs.js');
require('../../chunks/bundle-tFuTz5CT.js');

var ChannelPreview = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var channel = _a.channel, _l = _a.isActive, isActive = _l === void 0 ? false : _l, _m = _a.isTyping, isTyping = _m === void 0 ? false : _m, renderChannelAction = _a.renderChannelAction, onLeaveChannel = _a.onLeaveChannel, onClick = _a.onClick, tabIndex = _a.tabIndex;
    var sbState = useSendbirdStateContext.useSendbirdStateContext();
    var _o = ChannelList_context.useChannelListContext(), _p = _o.isTypingIndicatorEnabled, isTypingIndicatorEnabled = _p === void 0 ? false : _p, _q = _o.isMessageReceiptStatusEnabled, isMessageReceiptStatusEnabled = _q === void 0 ? false : _q;
    var _r = LocalizationContext.useLocalization(), dateLocale = _r.dateLocale, stringSet = _r.stringSet;
    var isMobile = MediaQueryContext.useMediaQueryContext().isMobile;
    var _s = React.useState(false), showMobileLeave = _s[0], setShowMobileLeave = _s[1];
    var userId = (_d = (_c = (_b = sbState === null || sbState === void 0 ? void 0 : sbState.stores) === null || _b === void 0 ? void 0 : _b.userStore) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.userId;
    var theme = (_e = sbState === null || sbState === void 0 ? void 0 : sbState.config) === null || _e === void 0 ? void 0 : _e.theme;
    var isMentionEnabled = (_f = sbState === null || sbState === void 0 ? void 0 : sbState.config) === null || _f === void 0 ? void 0 : _f.isMentionEnabled;
    var isFrozen = (channel === null || channel === void 0 ? void 0 : channel.isFrozen) || false;
    var isBroadcast = (channel === null || channel === void 0 ? void 0 : channel.isBroadcast) || false;
    var isChannelTyping = isTypingIndicatorEnabled && isTyping;
    var isMessageStatusEnabled = isMessageReceiptStatusEnabled
        && (((_g = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _g === void 0 ? void 0 : _g.messageType) === 'user' || ((_h = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _h === void 0 ? void 0 : _h.messageType) === 'file')
        && ((_k = (_j = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _j === void 0 ? void 0 : _j.sender) === null || _k === void 0 ? void 0 : _k.userId) === userId;
    var onLongPress = useLongPress.useLongPress({
        onLongPress: function () {
            if (isMobile) {
                setShowMobileLeave(true);
            }
        },
        onClick: onClick,
    }, {
        delay: 1000,
    });
    var channelName = ui_MessageStatus.getChannelTitle(channel, userId, stringSet);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", _tslib.__assign({ className: [
                'sendbird-channel-preview',
                isActive ? 'sendbird-channel-preview--active' : '',
            ].join(' '), role: "link", tabIndex: tabIndex }, (isMobile ? _tslib.__assign({}, onLongPress) : { onClick: onClick })),
            React.createElement("div", { className: "sendbird-channel-preview__avatar" },
                React.createElement(ui_ChannelAvatar, { channel: channel, userId: userId, theme: theme })),
            React.createElement("div", { className: "sendbird-channel-preview__content" },
                React.createElement("div", { className: "sendbird-channel-preview__content__upper" },
                    React.createElement("div", { className: "sendbird-channel-preview__content__upper__header" },
                        isBroadcast
                            && (React.createElement("div", { className: "sendbird-channel-preview__content__upper__header__broadcast-icon" },
                                React.createElement(ui_Icon.default, { type: ui_Icon.IconTypes.BROADCAST, fillColor: ui_Icon.IconColors.SECONDARY, height: "16px", width: "16px" }))),
                        React.createElement(ui_Label.Label, { className: "sendbird-channel-preview__content__upper__header__channel-name", type: ui_Label.LabelTypography.SUBTITLE_2, color: ui_Label.LabelColors.ONBACKGROUND_1 }, channelName),
                        React.createElement(ui_Label.Label, { className: "sendbird-channel-preview__content__upper__header__total-members", type: ui_Label.LabelTypography.CAPTION_2, color: ui_Label.LabelColors.ONBACKGROUND_2 }, ui_MessageStatus.getTotalMembers(channel)),
                        isFrozen
                            && (React.createElement("div", { title: "Frozen", className: "sendbird-channel-preview__content__upper__header__frozen-icon" },
                                React.createElement(ui_Icon.default, { type: ui_Icon.IconTypes.FREEZE, fillColor: ui_Icon.IconColors.PRIMARY, height: 12, width: 12 })))),
                    (!(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isMessageStatusEnabled) && (React.createElement(ui_MessageStatus.MessageStatus, { className: "sendbird-channel-preview__content__upper__last-message-at", channel: channel, message: channel === null || channel === void 0 ? void 0 : channel.lastMessage, isDateSeparatorConsidered: false })),
                    (!(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isMessageStatusEnabled) && (React.createElement(ui_Label.Label, { className: "sendbird-channel-preview__content__upper__last-message-at", type: ui_Label.LabelTypography.CAPTION_3, color: ui_Label.LabelColors.ONBACKGROUND_2 }, ui_MessageStatus.getLastMessageCreatedAt({
                        channel: channel,
                        locale: dateLocale,
                        stringSet: stringSet,
                    })))),
                React.createElement("div", { className: "sendbird-channel-preview__content__lower" },
                    React.createElement(ui_Label.Label, { className: "sendbird-channel-preview__content__lower__last-message", type: ui_Label.LabelTypography.BODY_2, color: ui_Label.LabelColors.ONBACKGROUND_3 },
                        isChannelTyping && (React.createElement(Channel_components_TypingIndicator.TypingIndicatorText, { members: channel === null || channel === void 0 ? void 0 : channel.getTypingUsers() })),
                        !isChannelTyping && !index.isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && (ui_MessageStatus.getLastMessage(channel, stringSet)),
                        !isChannelTyping && index.isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && (stringSet.VOICE_MESSAGE)),
                    /**
                     * Do not show unread count for focused channel. This is because of the limitation where
                     * isScrollBottom and hasNext states needs to be added globally but they are from channel context
                     * so channel list cannot see them with the current architecture.
                     */
                    !isActive && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && (React.createElement("div", { className: "sendbird-channel-preview__content__lower__unread-message-count" },
                        (isMentionEnabled && (channel === null || channel === void 0 ? void 0 : channel.unreadMentionCount) > 0)
                            ? (React.createElement(ui_MentionUserLabel, { className: "sendbird-channel-preview__content__lower__unread-message-count__mention", color: "purple" }, '@'))
                            : null,
                        ui_MessageStatus.getChannelUnreadMessageCount(channel) // return number
                            ? React.createElement(ui_Badge, { count: ui_MessageStatus.getChannelUnreadMessageCount(channel) })
                            : null)))),
            !isMobile && (React.createElement("div", { className: "sendbird-channel-preview__action" }, renderChannelAction({ channel: channel })))),
        showMobileLeave && isMobile && (React.createElement(ui_Modal.Modal, { className: "sendbird-channel-preview__leave--mobile", titleText: channelName, hideFooter: true, isCloseOnClickOutside: true, onCancel: function () { return setShowMobileLeave(false); } },
            React.createElement(ui_TextButton, { onClick: function () {
                    onLeaveChannel();
                    setShowMobileLeave(false);
                }, className: "sendbird-channel-preview__leave-label--mobile" },
                React.createElement(ui_Label.Label, { type: ui_Label.LabelTypography.SUBTITLE_1, color: ui_Label.LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))))));
};

module.exports = ChannelPreview;
//# sourceMappingURL=ChannelPreview.js.map
