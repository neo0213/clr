'use strict';

var React = require('react');
var LocalizationContext = require('../../chunks/bundle-ZurhBjw4.js');
var ui_ContextMenu = require('../../ui/ContextMenu.js');
var ui_IconButton = require('../../ui/IconButton.js');
var ui_Icon = require('../../ui/Icon.js');
var useSendbirdStateContext = require('../../useSendbirdStateContext.js');
var utils = require('../../chunks/bundle-Pe-j2f1D.js');
var ui_Modal = require('../../chunks/bundle-JragPpHy.js');
var ChannelList_context = require('../../chunks/bundle-FV9lCJz1.js');
require('../../chunks/bundle-v8bBiJ_c.js');
require('../../chunks/bundle-cV7uGK08.js');
require('../../chunks/bundle-QH7iLrPR.js');
require('react-dom');
require('../../ui/SortByRow.js');
require('../../chunks/bundle-NYFm08XH.js');
require('../../chunks/bundle-F--qTOLe.js');
require('../../utils/message/getOutgoingMessageState.js');
require('../../chunks/bundle-AQhLE-Ci.js');
require('../../chunks/bundle-0MHADZvF.js');
require('../../withSendbird.js');
require('../../chunks/bundle-vWUmeH2R.js');
require('../../ui/Button.js');
require('@sendbird/chat/groupChannel');
require('../../chunks/bundle-0wbO-LdY.js');
require('../../chunks/bundle-EVdeXpsD.js');
require('../../chunks/bundle-gM8i5lGF.js');

var LeaveChannel = function (props) {
    var _a, _b, _c;
    var _d = props.channel, channel = _d === void 0 ? null : _d, _e = props.onSubmit, onSubmit = _e === void 0 ? utils.noop : _e, _f = props.onCancel, onCancel = _f === void 0 ? utils.noop : _f;
    var channelFromContext = (_a = ChannelList_context.useChannelListContext()) === null || _a === void 0 ? void 0 : _a.currentChannel;
    var leavingChannel = channel || channelFromContext;
    var state = useSendbirdStateContext.useSendbirdStateContext();
    var stringSet = LocalizationContext.useLocalization().stringSet;
    var logger = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.logger;
    var isOnline = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.isOnline;
    if (leavingChannel) {
        return (React.createElement(ui_Modal.Modal, { disabled: !isOnline, onCancel: onCancel, onSubmit: function () {
                logger.info('ChannelSettings: Leaving channel', leavingChannel);
                leavingChannel === null || leavingChannel === void 0 ? void 0 : leavingChannel.leave().then(function () {
                    logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);
                    onSubmit();
                });
            }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE }));
    }
};

function ChannelPreviewAction(_a) {
    var channel = _a.channel, _b = _a.disabled, disabled = _b === void 0 ? false : _b, onLeaveChannel = _a.onLeaveChannel;
    var parentRef = React.useRef(null);
    var parentContainerRef = React.useRef(null);
    var _c = React.useState(false), showModal = _c[0], setShowModal = _c[1];
    var stringSet = React.useContext(LocalizationContext.LocalizationContext).stringSet;
    return (React.createElement("div", { ref: parentContainerRef, tabIndex: 0, role: "button", style: { display: 'inline-block' }, onKeyDown: function (e) { return e.stopPropagation(); }, onClick: function (e) { return e.stopPropagation(); } },
        React.createElement(ui_ContextMenu.default, { menuTrigger: function (toggleDropdown) { return (React.createElement(ui_IconButton, { ref: parentRef, onClick: toggleDropdown, height: "32px", width: "32px" },
                React.createElement(ui_Icon.default, { type: ui_Icon.IconTypes.MORE, fillColor: ui_Icon.IconColors.PRIMARY, width: "24px", height: "24px" }))); }, menuItems: function (closeDropdown) { return (React.createElement(ui_ContextMenu.MenuItems, { parentRef: parentRef, parentContainRef: parentContainerRef, closeDropdown: closeDropdown },
                React.createElement(ui_ContextMenu.MenuItem, { onClick: function () {
                        if (disabled) {
                            return;
                        }
                        setShowModal(true);
                        closeDropdown();
                    }, dataSbId: "channel_list_item_context_menu_leave_channel" }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE))); } }),
        showModal && (React.createElement(LeaveChannel, { channel: channel, onSubmit: function () {
                setShowModal(false);
                onLeaveChannel();
            }, onCancel: function () { return setShowModal(false); } }))));
}

module.exports = ChannelPreviewAction;
//# sourceMappingURL=ChannelPreviewAction.js.map
