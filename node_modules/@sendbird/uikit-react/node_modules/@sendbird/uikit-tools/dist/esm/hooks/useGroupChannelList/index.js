var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect, useRef } from 'react';
import { GroupChannelEventSource, GroupChannelFilter, GroupChannelListOrder, } from '@sendbird/chat/groupChannel';
import { premiumFeatures } from '../../constants/premiumFeatures.js';
import { useAsyncEffect } from '../useAsyncEffect.js';
import { useGroupChannelHandler } from '../useGroupChannelHandler.js';
import { usePreservedCallback } from '../usePreservedCallback.js';
import { useGroupChannelListReducer } from './reducer.js';
const createGroupChannelListCollection = (sdk, collectionCreator) => {
    const passedCollection = collectionCreator === null || collectionCreator === void 0 ? void 0 : collectionCreator();
    if (passedCollection)
        return passedCollection;
    const filter = new GroupChannelFilter();
    filter.includeEmpty = false;
    return sdk.groupChannel.createGroupChannelCollection({
        filter,
        limit: 20,
        order: GroupChannelListOrder.LATEST_LAST_MESSAGE,
    });
};
export const useGroupChanelList = (sdk, options) => {
    var _a, _b;
    const deliveryReceiptEnabled = Boolean((_b = (_a = sdk.appInfo) === null || _a === void 0 ? void 0 : _a.premiumFeatureList) === null || _b === void 0 ? void 0 : _b.includes(premiumFeatures.delivery_receipt));
    const collectionRef = useRef();
    const { initialized, groupChannels, refreshing, appendChannels, deleteChannels, updateRefreshing, updateInitialized, } = useGroupChannelListReducer();
    const updateChannelsAndMarkAsDelivered = (shouldMarkAsDelivered, source, updatedChannels) => {
        var _a, _b, _c;
        const channels = (_b = (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.channels) !== null && _b !== void 0 ? _b : [];
        appendChannels(channels, true);
        if (shouldMarkAsDelivered && deliveryReceiptEnabled) {
            switch (source) {
                case GroupChannelEventSource.EVENT_MESSAGE_RECEIVED:
                case GroupChannelEventSource.EVENT_MESSAGE_SENT:
                case GroupChannelEventSource.SYNC_CHANNEL_BACKGROUND:
                case GroupChannelEventSource.SYNC_CHANNEL_CHANGELOGS:
                case undefined:
                    (_c = options.markAsDelivered) === null || _c === void 0 ? void 0 : _c.call(options, updatedChannels !== null && updatedChannels !== void 0 ? updatedChannels : channels);
                    break;
            }
        }
    };
    const init = usePreservedCallback((uid) => __awaiter(void 0, void 0, void 0, function* () {
        var _c, _d, _e, _f;
        if (collectionRef.current)
            (_c = collectionRef.current) === null || _c === void 0 ? void 0 : _c.dispose();
        if (uid) {
            collectionRef.current = createGroupChannelListCollection(sdk, options === null || options === void 0 ? void 0 : options.collectionCreator);
            (_d = collectionRef.current) === null || _d === void 0 ? void 0 : _d.setGroupChannelCollectionHandler({
                onChannelsAdded: (context, channels) => {
                    updateChannelsAndMarkAsDelivered(true, context.source, channels);
                },
                onChannelsUpdated: (context, channels) => {
                    updateChannelsAndMarkAsDelivered(true, context.source, channels);
                },
                onChannelsDeleted: () => {
                    updateChannelsAndMarkAsDelivered(false);
                },
            });
            if ((_e = collectionRef.current) === null || _e === void 0 ? void 0 : _e.hasMore) {
                yield ((_f = collectionRef.current) === null || _f === void 0 ? void 0 : _f.loadMore());
                updateChannelsAndMarkAsDelivered(true);
            }
        }
    }));
    useEffect(() => {
        return () => {
            var _a;
            if (collectionRef.current)
                (_a = collectionRef.current) === null || _a === void 0 ? void 0 : _a.dispose();
        };
    }, []);
    useAsyncEffect(() => __awaiter(void 0, void 0, void 0, function* () {
        var _g;
        updateInitialized(false);
        yield init((_g = sdk.currentUser) === null || _g === void 0 ? void 0 : _g.userId);
        updateInitialized(true);
    }), [sdk, sdk.currentUser]);
    useGroupChannelHandler(sdk, {
        onUserBanned: (channel, user) => {
            var _a;
            const isMe = user.userId === ((_a = sdk.currentUser) === null || _a === void 0 ? void 0 : _a.userId);
            if (isMe)
                deleteChannels([channel.url]);
            else
                updateChannelsAndMarkAsDelivered(false);
        },
    });
    const refresh = usePreservedCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        var _h;
        updateRefreshing(true);
        yield init((_h = sdk.currentUser) === null || _h === void 0 ? void 0 : _h.userId);
        updateRefreshing(false);
    }));
    const loadMore = usePreservedCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        var _j, _k;
        if ((_j = collectionRef.current) === null || _j === void 0 ? void 0 : _j.hasMore) {
            yield ((_k = collectionRef.current) === null || _k === void 0 ? void 0 : _k.loadMore());
            updateChannelsAndMarkAsDelivered(true);
        }
    }));
    return {
        /**
         * Initializing state, only available on first render
         * */
        initialized,
        /**
         * Get group channels state
         * */
        groupChannels,
        /**
         * Refresh, clear and reload messages from latest
         * @return {Promise<void>}
         * */
        refresh,
        /**
         * Refreshing state, status is changes when the refresh is called.
         * */
        refreshing,
        /**
         * Fetch more channels to state
         * @return {Promise<void>}
         * */
        loadMore,
    };
};
