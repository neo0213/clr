import type { CamelCasedPropertiesDeep } from 'type-fest';

export function snakeToCamel<T>(obj: T): CamelCasedPropertiesDeep<T> {
  if (typeof obj !== 'object' || obj === null) {
    return obj as CamelCasedPropertiesDeep<T>;
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => snakeToCamel(item)) as CamelCasedPropertiesDeep<T>;
  }

  const result = {} as CamelCasedPropertiesDeep<T>;
  Object.keys(obj).forEach((key) => {
    const camelKey = key.replace(/_\w/g, (m) => m[1].toUpperCase());
    // @ts-ignore
    result[camelKey] = snakeToCamel(obj[key]);
  });

  return result;
}
