import { a as __spreadArray, _ as __assign } from '../chunks/bundle-Y6TqPszM.js';
import React__default, { useMemo, useState } from 'react';

var numberToPx = (function (value) {
    return typeof value === 'number' ? "".concat(value, "px") : value;
});

function getDynamicMinLengthInPx(sideLength, maxSideLength, defaultMinLength) {
    var _a;
    return "min(".concat(maxSideLength !== null && maxSideLength !== void 0 ? maxSideLength : defaultMinLength, ", ").concat((_a = numberToPx(sideLength)) !== null && _a !== void 0 ? _a : defaultMinLength, ")");
}

function useDynamicSideLength(_a) {
    var width = _a.width, height = _a.height, maxSideLength = _a.maxSideLength, defaultMinLength = _a.defaultMinLength;
    var dynamicMinWidth = useMemo(function () {
        return getDynamicMinLengthInPx(width, maxSideLength, defaultMinLength);
    }, [width]);
    var dynamicMinHeight = useMemo(function () {
        return getDynamicMinLengthInPx(height, maxSideLength, defaultMinLength);
    }, [height]);
    return [dynamicMinWidth, dynamicMinHeight];
}

/*
  ImageRenderer displays image with url or source
  it checks if the source exist with img tag first
  if it exists onLoad is called, if not onError is called
  and those properties switch img tag to real purposing element
*/
function getBorderRadiusForImageRenderer(circle, borderRadius) {
    if (circle === void 0) { circle = false; }
    if (borderRadius === void 0) { borderRadius = null; }
    return circle ? '50%' : numberToPx(borderRadius);
}
function getBorderRadiusForMultipleImageRenderer(borderRadius, index, totalCount) {
    var value = typeof borderRadius === 'string' ? parseInt(borderRadius, 10) : borderRadius;
    var lastIndex = totalCount - 1;
    var topLeft = index === 0 ? value * 2 : value;
    var topRight = index === 1 ? value * 2 : value;
    var bottomRight = index === lastIndex ? value * 2 : value;
    var bottomLeft = index === lastIndex - 1 ? value * 2 : value;
    return "".concat(topLeft, "px ").concat(topRight, "px ").concat(bottomRight, "px ").concat(bottomLeft, "px");
}
var ImageRenderer = function (_a) {
    var _b = _a.className, className = _b === void 0 ? '' : _b, url = _a.url, _c = _a.alt, alt = _c === void 0 ? '' : _c, _d = _a.width, width = _d === void 0 ? null : _d, _e = _a.maxSideLength, maxSideLength = _e === void 0 ? null : _e, _f = _a.height, height = _f === void 0 ? null : _f, _g = _a.circle, circle = _g === void 0 ? false : _g, _h = _a.fixedSize, fixedSize = _h === void 0 ? false : _h, _j = _a.placeHolder, placeHolder = _j === void 0 ? null : _j, _k = _a.defaultComponent, defaultComponent = _k === void 0 ? null : _k, _l = _a.borderRadius, borderRadius = _l === void 0 ? null : _l, _m = _a.onLoad, onLoad = _m === void 0 ? function () { } : _m, _o = _a.onError, onError = _o === void 0 ? function () { } : _o, shadeOnHover = _a.shadeOnHover, _p = _a.isUploaded, isUploaded = _p === void 0 ? true : _p;
    var _q = useState(false), showDefaultComponent = _q[0], setShowDefaultComponent = _q[1];
    var _r = useState(true), showPlaceHolder = _r[0], setShowPlaceHolder = _r[1];
    var _s = useDynamicSideLength({
        width: width,
        height: height,
        maxSideLength: maxSideLength,
        defaultMinLength: '400px',
    }), dynamicMinWidth = _s[0], dynamicMinHeight = _s[1];
    var DefaultComponent = useMemo(function () {
        return typeof defaultComponent === 'function'
            ? defaultComponent()
            : defaultComponent;
    }, [defaultComponent]);
    var PlaceHolder = useMemo(function () {
        return (placeHolder && typeof placeHolder === 'function')
            ? placeHolder({
                style: {
                    width: '100%',
                    minWidth: dynamicMinWidth,
                    maxWidth: fixedSize ? dynamicMinWidth : '400px',
                    height: dynamicMinHeight,
                    position: 'absolute',
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                },
            })
            : null;
    }, [placeHolder]);
    var HiddenImageLoader = useMemo(function () {
        setShowDefaultComponent(false);
        // reset the state when url is changed
        return (React__default.createElement("img", { className: "sendbird-image-renderer__hidden-image-loader", src: url, alt: alt, onLoad: function () {
                setShowPlaceHolder(false);
                onLoad();
            }, onError: function () {
                setShowDefaultComponent(true);
                onError();
            } }));
    }, [url]);
    return dynamicMinWidth && dynamicMinHeight && (React__default.createElement("div", { className: __spreadArray(__spreadArray([], (Array.isArray(className) ? className : [className]), true), [
            'sendbird-image-renderer',
        ], false).join(' '), style: {
            width: '100%',
            minWidth: dynamicMinWidth,
            maxWidth: fixedSize ? dynamicMinWidth : '400px',
            height: dynamicMinHeight,
        } },
        showPlaceHolder && PlaceHolder,
        showDefaultComponent
            ? DefaultComponent
            : (React__default.createElement("div", { className: "sendbird-image-renderer__image", style: {
                    width: '100%',
                    minWidth: dynamicMinWidth,
                    maxWidth: fixedSize ? dynamicMinWidth : '400px',
                    height: dynamicMinHeight,
                    position: 'absolute',
                    backgroundRepeat: 'no-repeat',
                    backgroundPosition: 'center',
                    backgroundSize: 'cover',
                    backgroundImage: "url(".concat(url, ")"),
                    borderRadius: getBorderRadiusForImageRenderer(circle, borderRadius),
                } })),
        HiddenImageLoader,
        shadeOnHover && React__default.createElement("div", { className: "sendbird-multiple-files-image-renderer__image-cover", style: __assign({ borderRadius: getBorderRadiusForImageRenderer(circle, borderRadius) }, (isUploaded ? {} : { display: 'inline-flex' })) })));
};

export { ImageRenderer as default, getBorderRadiusForImageRenderer, getBorderRadiusForMultipleImageRenderer };
//# sourceMappingURL=ImageRenderer.js.map
